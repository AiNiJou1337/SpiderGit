generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Repository {
  id          Int                 @id @default(autoincrement())
  name        String
  owner       String
  fullName    String              @unique @map("full_name")
  description String?
  language    String?
  stars       Int                 @default(0)
  forks       Int                 @default(0)
  todayStars  Int                 @default(0) @map("today_stars")
  url         String
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  trending    Boolean             @default(true)
  trendDate   DateTime            @default(now()) @map("trend_date")
  trendPeriod String              @default("daily") @map("trend_period")
  lastUpdated DateTime?           @map("last_updated")
  publishedAt DateTime?           @map("published_at")
  readme      String?
  tags        String[]
  codeFiles   CodeFile[]
  keywords    RepositoryKeyword[]

  @@map("repositories")
}

model Keyword {
  id           Int                 @id @default(autoincrement())
  text         String              @unique
  createdAt    DateTime            @default(now()) @map("created_at")
  analytics    Analytics[]
  crawlTasks   CrawlTask[]
  repositories RepositoryKeyword[]

  @@map("keywords")
}

model CrawlTask {
  id                 Int       @id @default(autoincrement())
  status             String
  progress           Int       @default(0)
  message            String?
  startedAt          DateTime  @default(now()) @map("started_at")
  completedAt        DateTime? @map("completed_at")
  keywordId          Int
  totalRepositories  Int       @default(0) @map("total_repositories")
  pythonRepositories Int       @default(0) @map("python_repositories")
  javaRepositories   Int       @default(0) @map("java_repositories")
  keyword            Keyword   @relation(fields: [keywordId], references: [id])

  @@index([keywordId])
  @@map("crawl_tasks")
}

model CodeFile {
  id           Int        @id @default(autoincrement())
  filename     String
  path         String
  content      String?
  comments     String?
  functions    String[]
  packages     String[]
  components   String[]
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  apiEndpoints String[]   @map("api_endpoints")
  repositoryId Int        @map("repository_id")
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@index([repositoryId])
  @@map("code_files")
}

model RepositoryKeyword {
  id           Int        @id @default(autoincrement())
  repositoryId Int
  keywordId    Int
  createdAt    DateTime   @default(now()) @map("created_at")
  keyword      Keyword    @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, keywordId])
  @@index([repositoryId])
  @@index([keywordId])
  @@map("repository_keywords")
}

model Analytics {
  id                Int      @id @default(autoincrement())
  date              DateTime @default(now())
  keywordId         Int
  totalStars        Int      @default(0)
  totalRepositories Int      @default(0)
  avgStars          Float    @default(0)
  avgForks          Float    @default(0)
  topLanguages      Json
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  keyword           Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@index([keywordId])
  @@index([date])
  @@map("analytics")
}
