name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend quality check and build
  frontend:
    runs-on: ubuntu-latest
    name: Frontend Build & Quality Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: ESLint code check
      run: npm run lint

    - name: TypeScript type check
      run: npm run type-check

    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        NODE_ENV: production

    - name: Check build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed: .next directory does not exist"
          exit 1
        fi
        echo "✅ Frontend build successful"

  # Python scraper system check
  python-scraper:
    runs-on: ubuntu-latest
    name: Python Scraper Quality Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/scraper/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/scraper/requirements.txt
        pip install flake8 black isort

    - name: Code format check (Black)
      run: black --check backend/scraper/ --diff
      continue-on-error: true

    - name: Import sorting check (isort)
      run: isort --check-only backend/scraper/ --diff
      continue-on-error: true

    - name: Syntax and style check (Flake8)
      run: flake8 backend/scraper/ --max-line-length=88 --extend-ignore=E203,W503,F401

    - name: Verify core modules can be imported
      run: |
        cd backend/scraper
        python -c "import keyword_scraper; print('✅ keyword_scraper module normal')"
        python -c "import analyzers.data_analysis; print('✅ data_analysis module normal')"
        python -c "import analyzers.code_analyzer; print('✅ code_analyzer module normal')"

  # API routes and database check
  api-database:
    runs-on: ubuntu-latest
    name: API Routes & Database Check

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Push database schema
      run: npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Validate Prisma schema
      run: npx prisma validate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Check API route files
      run: |
        echo "Checking key API routes..."
        test -f "app/api/keywords/route.ts" && echo "✅ keywords API exists"
        test -f "app/api/repositories/route.ts" && echo "✅ repositories API exists"
        test -f "app/api/stats/route.ts" && echo "✅ stats API exists"
        test -f "app/api/libraries/route.ts" && echo "✅ libraries API exists"
        echo "API route check completed"

  # Security and dependency check
  security:
    runs-on: ubuntu-latest
    name: Security & Dependency Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: npm security audit
      run: |
        echo "Checking npm dependency security..."
        npm audit --audit-level high || echo "⚠️ Found high-risk dependencies, please check"
      continue-on-error: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Python dependency security check
      run: |
        pip install safety
        echo "Checking Python dependency security..."
        safety check -r backend/scraper/requirements.txt || echo "⚠️ Found Python security issues, please check"
      continue-on-error: true

    - name: Check sensitive files
      run: |
        echo "Checking for accidentally committed sensitive files..."
        if [ -f ".env" ]; then
          echo "❌ Found .env file, please remove"
          exit 1
        fi
        if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -q .; then
          echo "❌ Found key files, please remove"
          exit 1
        fi
        echo "✅ No sensitive files found"

  # Unit tests for frontend (Jest) and backend (pytest)
  tests:
    runs-on: ubuntu-latest
    name: Frontend & Backend Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Setup Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Node.js dependencies
    	run: npm ci

    - name: Install Python dependencies (dev)
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements/dev.txt

    - name: Run frontend tests (Jest)
      run: npm test -- --ci --runInBand

    - name: Run backend tests (pytest)
      run: |
        pytest -q tests/backend
