{
  "keyword": "Financial API",
  "repository_count": 80,
  "analysis_date": "2025-08-26T23:09:09.790248",
  "charts": {
    "language_distribution": {
      "data": {
        "total_languages": 2,
        "language_distribution": {
          "Python": 50,
          "Java": 30
        },
        "language_stars": {
          "Python": 0,
          "Java": 0
        },
        "language_avg_stars": {
          "Python": 0.0,
          "Java": 0.0
        },
        "top_languages": [
          [
            "Python",
            50
          ],
          [
            "Java",
            30
          ]
        ],
        "analyzed_at": "2025-08-26T23:09:09.703757"
      }
    },
    "stars_distribution": {
      "data": {
        "mean": 126.3375,
        "min": 1,
        "max": 4491,
        "total": 0
      }
    },
    "common_packages": {
      "data": {}
    },
    "imported_libraries": {
      "data": {
        "setuptools": 13,
        "os": 9,
        "eodhd": 4,
        "sys": 3,
        "config as cfg": 3,
        "codecs": 2,
        "dotenv": 2,
        "sec_api": 1,
        "finnhub": 1,
        "pkg_resources": 1,
        "io": 1,
        "json": 1,
        "httpx": 1,
        "mcp": 1,
        "logging": 1,
        "typing": 1,
        "fmpsdk": 1,
        "argparse": 1,
        "src": 1,
        "ast": 1
      }
    },
    "common_functions": {
      "data": {}
    },
    "tag_analysis": {
      "data": {
        "total_topics": 246,
        "topic_distribution": {
          "python": 14,
          "api": 11,
          "finance": 10,
          "trading": 8,
          "stocks": 6,
          "java": 6,
          "financial-data": 5,
          "stock": 5,
          "financial": 5,
          "stock-market": 5,
          "machine-learning": 5,
          "cryptocurrency": 4,
          "spring-boot": 4,
          "pandas": 3,
          "python3": 3,
          "forex": 3,
          "market-data": 3,
          "quantitative-finance": 3,
          "yahoo-finance": 3,
          "fastapi": 3,
          "rest-api": 3,
          "mysql": 3,
          "alphavantage": 2,
          "api-wrapper": 2,
          "json": 2,
          "stock-data": 2,
          "websocket": 2,
          "tick": 2,
          "portfolio-optimization": 2,
          "banking": 2,
          "fintech": 2,
          "bank": 2,
          "banking-api": 2,
          "bunq-api": 2,
          "django": 2,
          "postgresql": 2,
          "government": 2,
          "iex": 2,
          "mockito": 2,
          "trading-algorithms": 2,
          "ai": 2,
          "automation": 2,
          "pdmr": 2,
          "pdmr-transaction": 2,
          "springboot": 2,
          "hibernate": 2,
          "alpha-vantage": 1,
          "bitcoin": 1,
          "finnhub": 1,
          "finance-api": 1,
          "schwab": 1,
          "schwab-api": 1,
          "schwab-python": 1,
          "tda": 1,
          "tdameritrade": 1,
          "tdameritrade-api": 1,
          "financial-analysis": 1,
          "interactive-charts": 1,
          "matplotlib": 1,
          "ohlc": 1,
          "static-charts": 1,
          "technical-indicators": 1,
          "twelve-data": 1,
          "twelvedata": 1,
          "cryptocurrency-api": 1,
          "forex-api": 1,
          "free-market": 1,
          "free-quote": 1,
          "gold-api": 1,
          "hk-stocks-api": 1,
          "kline": 1,
          "market": 1,
          "metals-api": 1,
          "python-quote": 1,
          "quote": 1,
          "quote-api": 1,
          "quotes-api": 1,
          "stock-api": 1,
          "stock-apis": 1,
          "us-stocks-api": 1,
          "stock-prices": 1,
          "ticker-data": 1,
          "10-k": 1,
          "10-q": 1,
          "13f-api": 1,
          "edgar-api": 1,
          "edgar-database": 1,
          "edgar-filings": 1,
          "sec-edgar-api": 1,
          "edar": 1,
          "sec-edgar": 1,
          "broker-api": 1,
          "edgar": 1,
          "financial-markets": 1,
          "fundamental-analysis": 1,
          "portfolio-construction": 1,
          "strategies": 1,
          "yahoo-finance-api": 1,
          "australia": 1,
          "banking-apis": 1,
          "cdr": 1,
          "consumer-data": 1,
          "hacktoberfest": 1,
          "open-banking": 1,
          "python-sdk": 1,
          "sdks": 1,
          "fintech-api": 1,
          "naija": 1,
          "calendar": 1,
          "dividends": 1,
          "earnings": 1,
          "ipo": 1,
          "eod-historical-data": 1,
          "eodhistoricaldata": 1,
          "technical-analysis": 1,
          "java-sdk": 1,
          "payment": 1,
          "sdk": 1,
          "newsapi": 1,
          "stock-market-news-api": 1,
          "alx-africa": 1,
          "banking-system": 1,
          "django-application": 1,
          "neon-postgresql": 1,
          "neondb": 1,
          "etf": 1,
          "open-data": 1,
          "taiwan": 1,
          "taiwan-etf": 1,
          "taiwan-stock-market": 1,
          "fred": 1,
          "package": 1,
          "usa": 1,
          "valuation": 1,
          "wrapper": 1,
          "onvista": 1,
          "firebase-db": 1,
          "rxjava-android": 1,
          "rxjava2": 1,
          "trader": 1,
          "trading-api": 1,
          "trading-platform": 1,
          "trading-simulator": 1,
          "trading-strategies": 1,
          "finance-management": 1,
          "agno": 1,
          "aiagent": 1,
          "currencies": 1,
          "currency": 1,
          "currency-converter": 1,
          "currency-exchange-rates": 1,
          "data-visualization": 1,
          "economy": 1,
          "exporter": 1,
          "grafana": 1,
          "grafana-dashboard": 1,
          "homeautomation": 1,
          "iot": 1,
          "metrics": 1,
          "monitoring": 1,
          "open-source": 1,
          "prometheus": 1,
          "prometheus-exporter": 1,
          "real-time": 1,
          "commodities": 1,
          "derivatives": 1,
          "etfs": 1,
          "intraday": 1,
          "orderbook": 1,
          "quantum-computing": 1,
          "trading-bot": 1,
          "sqlmodel": 1,
          "twilio": 1,
          "whatsapp": 1,
          "streamlit": 1,
          "agents": 1,
          "chainlink": 1,
          "chainlink-adapter": 1,
          "payments": 1,
          "smart-contracts": 1,
          "swift": 1,
          "swift-ea": 1,
          "swift-financial-messages": 1,
          "css": 1,
          "flask": 1,
          "html": 1,
          "js": 1,
          "aws-apigateway": 1,
          "aws-lambda": 1,
          "docker": 1,
          "google-finance": 1,
          "redis": 1,
          "websockets": 1,
          "dev": 1,
          "ledger": 1,
          "api-gateway": 1,
          "automa": 1,
          "erp-systems": 1,
          "freeagent": 1,
          "freshbooks": 1,
          "invoicing": 1,
          "machine-vision": 1,
          "machinelearning": 1,
          "payroll": 1,
          "sage": 1,
          "xero": 1,
          "zoho": 1,
          "pyqt": 1,
          "quandl": 1,
          "scipy": 1,
          "statistics": 1,
          "data-analysis": 1,
          "data-science": 1,
          "database": 1,
          "natural-language-processing": 1,
          "nlp": 1,
          "selenium": 1,
          "sentiment-analysis": 1,
          "sqlite3": 1,
          "webscraping": 1,
          "finansinspektionen": 1,
          "insiderhandel": 1,
          "insynshandel": 1,
          "insynsregistret": 1,
          "maven": 1,
          "postman": 1,
          "api-trading": 1,
          "fix-api": 1,
          "fixapi": 1,
          "jpa": 1,
          "malta": 1,
          "mfsa": 1,
          "100plusapis": 1,
          "android-app": 1,
          "bussinesss-app": 1,
          "devinebiz": 1,
          "jwt-auth": 1,
          "project-k": 1,
          "rest-apis": 1,
          "junit": 1,
          "sql": 1,
          "financial-management": 1,
          "goal-based-savings": 1,
          "investment-tracker": 1,
          "jwt": 1,
          "spring-security": 1
        },
        "top_topics": [
          [
            "python",
            14
          ],
          [
            "api",
            11
          ],
          [
            "finance",
            10
          ],
          [
            "trading",
            8
          ],
          [
            "stocks",
            6
          ],
          [
            "java",
            6
          ],
          [
            "financial-data",
            5
          ],
          [
            "stock",
            5
          ],
          [
            "financial",
            5
          ],
          [
            "stock-market",
            5
          ],
          [
            "machine-learning",
            5
          ],
          [
            "cryptocurrency",
            4
          ],
          [
            "spring-boot",
            4
          ],
          [
            "pandas",
            3
          ],
          [
            "python3",
            3
          ],
          [
            "forex",
            3
          ],
          [
            "market-data",
            3
          ],
          [
            "quantitative-finance",
            3
          ],
          [
            "yahoo-finance",
            3
          ],
          [
            "fastapi",
            3
          ]
        ],
        "analyzed_at": "2025-08-26T23:09:09.704776"
      }
    }
  },
  "trends": {
    "libraries": {
      "setuptools": {
        "trend": "上升",
        "growth": "+15%",
        "usage_count": 13,
        "popularity": "高"
      },
      "os": {
        "trend": "上升",
        "growth": "+15%",
        "usage_count": 9,
        "popularity": "高"
      },
      "eodhd": {
        "trend": "稳定",
        "growth": "+5%",
        "usage_count": 4,
        "popularity": "中"
      },
      "sys": {
        "trend": "稳定",
        "growth": "+5%",
        "usage_count": 3,
        "popularity": "中"
      },
      "config as cfg": {
        "trend": "稳定",
        "growth": "+5%",
        "usage_count": 3,
        "popularity": "中"
      },
      "codecs": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 2,
        "popularity": "低"
      },
      "dotenv": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 2,
        "popularity": "低"
      },
      "sec_api": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "finnhub": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "pkg_resources": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "io": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "json": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "httpx": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "mcp": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "logging": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "typing": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "fmpsdk": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "argparse": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "src": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      },
      "ast": {
        "trend": "新兴",
        "growth": "+25%",
        "usage_count": 1,
        "popularity": "低"
      }
    },
    "packages": {},
    "functions": {}
  },
  "repositories": [
    {
      "id": 625,
      "name": "alpha_vantage",
      "full_name": "RomelTorres/alpha_vantage",
      "owner": "RomelTorres",
      "description": "A python wrapper for Alpha Vantage API for financial data.",
      "url": "https://github.com/RomelTorres/alpha_vantage",
      "language": "Python",
      "stars": 4491,
      "forks": 759,
      "tags": [
        "alpha-vantage",
        "alphavantage",
        "api-wrapper",
        "bitcoin",
        "cryptocurrency",
        "finance",
        "financial-data",
        "json",
        "pandas",
        "python",
        "stock"
      ],
      "created_at": "2025-05-21T10:54:09.408000",
      "updated_at": "2025-05-21T10:54:09.408000",
      "trend_date": "2025-05-21T10:54:09.408000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:09.408000"
    },
    {
      "id": 626,
      "name": "finnhub-python",
      "full_name": "Finnhub-Stock-API/finnhub-python",
      "owner": "Finnhub-Stock-API",
      "description": "Finnhub Python API Client. Finnhub API provides institutional-grade financial data to investors, fintech startups and investment firms. We support real-time stock price, global fundamentals, global ETFs holdings and alternative data. https://finnhub.io/docs/api",
      "url": "https://github.com/Finnhub-Stock-API/finnhub-python",
      "language": "Python",
      "stars": 685,
      "forks": 117,
      "tags": [
        "api",
        "finnhub",
        "stock"
      ],
      "created_at": "2025-05-21T10:54:14.086000",
      "updated_at": "2025-05-21T10:54:14.086000",
      "trend_date": "2025-05-21T10:54:14.086000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:14.086000"
    },
    {
      "id": 627,
      "name": "Schwabdev",
      "full_name": "tylerebowers/Schwabdev",
      "owner": "tylerebowers",
      "description": "An easy and lightweight wrapper for using the Charles Schwab API.",
      "url": "https://github.com/tylerebowers/Schwabdev",
      "language": "Python",
      "stars": 484,
      "forks": 191,
      "tags": [
        "finance",
        "finance-api",
        "financial",
        "python",
        "python3",
        "schwab",
        "schwab-api",
        "schwab-python",
        "stock-data",
        "stock-market",
        "stocks",
        "tda",
        "tdameritrade",
        "tdameritrade-api",
        "trading"
      ],
      "created_at": "2025-05-21T10:54:19.684000",
      "updated_at": "2025-05-21T10:54:19.684000",
      "trend_date": "2025-05-21T10:54:19.684000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:19.684000"
    },
    {
      "id": 628,
      "name": "finagg",
      "full_name": "theOGognf/finagg",
      "owner": "theOGognf",
      "description": "A Python package for aggregating and normalizing historical data from popular and free financial APIs.",
      "url": "https://github.com/theOGognf/finagg",
      "language": "Python",
      "stars": 484,
      "forks": 23,
      "tags": [
        "finance"
      ],
      "created_at": "2025-05-21T10:54:23.705000",
      "updated_at": "2025-05-21T10:54:23.705000",
      "trend_date": "2025-05-21T10:54:23.705000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:23.706000"
    },
    {
      "id": 629,
      "name": "twelvedata-python",
      "full_name": "twelvedata/twelvedata-python",
      "owner": "twelvedata",
      "description": "Twelve Data Python Client - Financial data API & WebSocket",
      "url": "https://github.com/twelvedata/twelvedata-python",
      "language": "Python",
      "stars": 472,
      "forks": 71,
      "tags": [
        "cryptocurrency",
        "financial-analysis",
        "financial-data",
        "forex",
        "interactive-charts",
        "matplotlib",
        "ohlc",
        "pandas",
        "static-charts",
        "stock-market",
        "technical-indicators",
        "twelve-data",
        "twelvedata",
        "websocket"
      ],
      "created_at": "2025-05-21T10:54:26.265000",
      "updated_at": "2025-05-21T10:54:26.265000",
      "trend_date": "2025-05-21T10:54:26.265000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:26.265000"
    },
    {
      "id": 674,
      "name": "alltick-realtime-forex-crypto-stock-tick-finance-websocket-api",
      "full_name": "alltick/alltick-realtime-forex-crypto-stock-tick-finance-websocket-api",
      "owner": "alltick",
      "description": "Real-time financial market data API, real-time forex data API, real-time stock data API, real-time cryptocurrency data API, real-time commodity data API service,real-time tick data,tick-by-tick quotes,data access solutions,real-time market quotes api,实时金融市场数据API,实时外汇数据API,实时股票数据API,实时加密货币数据API,实时商品数据API服务, 实时Tick数据, 逐笔报价, 数据接入解决方案,实时行情报价api",
      "url": "https://github.com/alltick/alltick-realtime-forex-crypto-stock-tick-finance-websocket-api",
      "language": "Java",
      "stars": 337,
      "forks": 51,
      "tags": [
        "cryptocurrency-api",
        "forex-api",
        "free-market",
        "free-quote",
        "gold-api",
        "hk-stocks-api",
        "kline",
        "market",
        "market-data",
        "metals-api",
        "python-quote",
        "quote",
        "quote-api",
        "quotes-api",
        "stock",
        "stock-api",
        "stock-apis",
        "tick",
        "us-stocks-api",
        "websocket"
      ],
      "created_at": "2025-05-21T10:56:53.463000",
      "updated_at": "2025-05-21T10:56:53.463000",
      "trend_date": "2025-05-21T10:56:53.463000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:53.464000"
    },
    {
      "id": 630,
      "name": "tiingo-python",
      "full_name": "hydrosquall/tiingo-python",
      "owner": "hydrosquall",
      "description": "Python client for interacting with the Tiingo Financial Data API (stock ticker and news data)",
      "url": "https://github.com/hydrosquall/tiingo-python",
      "language": "Python",
      "stars": 279,
      "forks": 55,
      "tags": [
        "finance",
        "stock-market",
        "stock-prices",
        "stocks",
        "ticker-data"
      ],
      "created_at": "2025-05-21T10:54:30.319000",
      "updated_at": "2025-05-21T10:54:30.319000",
      "trend_date": "2025-05-21T10:54:30.319000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:30.319000"
    },
    {
      "id": 631,
      "name": "mcp-server",
      "full_name": "financial-datasets/mcp-server",
      "owner": "financial-datasets",
      "description": "An MCP server for interacting with the Financial Datasets stock market API.",
      "url": "https://github.com/financial-datasets/mcp-server",
      "language": "Python",
      "stars": 276,
      "forks": 49,
      "tags": [],
      "created_at": "2025-05-21T10:54:34.435000",
      "updated_at": "2025-05-21T10:54:34.435000",
      "trend_date": "2025-05-21T10:54:34.435000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:34.435000"
    },
    {
      "id": 552,
      "name": "sec-api-python",
      "full_name": "janlukasschroeder/sec-api-python",
      "owner": "janlukasschroeder",
      "description": "Python SEC EDGAR Filings API. Over 18 million filings, all 150 filing types supported. Query, full-text search and real-time stream API. Convert XBRL-to-JSON and access standardized financial statements from 10-K and 10-Q filings.",
      "url": "https://github.com/janlukasschroeder/sec-api-python",
      "language": "Python",
      "stars": 233,
      "forks": 29,
      "tags": [
        "10-k",
        "10-q",
        "13f-api",
        "edgar-api",
        "edgar-database",
        "edgar-filings",
        "sec-edgar-api"
      ],
      "created_at": "2025-05-20T17:24:15.401000",
      "updated_at": "2025-05-20T17:24:15.401000",
      "trend_date": "2025-05-20T17:24:15.401000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:38.424000"
    },
    {
      "id": 632,
      "name": "fmpsdk",
      "full_name": "daxm/fmpsdk",
      "owner": "daxm",
      "description": "SDK for Financial Modeling Prep's (FMP) API",
      "url": "https://github.com/daxm/fmpsdk",
      "language": "Python",
      "stars": 187,
      "forks": 71,
      "tags": [],
      "created_at": "2025-05-21T10:54:44.209000",
      "updated_at": "2025-05-21T10:54:44.209000",
      "trend_date": "2025-05-21T10:54:44.209000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:44.210000"
    },
    {
      "id": 633,
      "name": "redtide",
      "full_name": "qks1lver/redtide",
      "owner": "qks1lver",
      "description": "For compiling financial data and stock prices, Robinhood API, tradebot... etc",
      "url": "https://github.com/qks1lver/redtide",
      "language": "Python",
      "stars": 166,
      "forks": 38,
      "tags": [],
      "created_at": "2025-05-21T10:54:48.300000",
      "updated_at": "2025-05-21T10:54:48.300000",
      "trend_date": "2025-05-21T10:54:48.300000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:48.300000"
    },
    {
      "id": 634,
      "name": "sec-edgar-financials",
      "full_name": "farhadab/sec-edgar-financials",
      "owner": "farhadab",
      "description": "Extract financial data from the SEC's EDGAR database",
      "url": "https://github.com/farhadab/sec-edgar-financials",
      "language": "Python",
      "stars": 158,
      "forks": 44,
      "tags": [
        "api",
        "edar",
        "financial-data",
        "json",
        "python",
        "sec-edgar",
        "stocks"
      ],
      "created_at": "2025-05-21T10:54:52.326000",
      "updated_at": "2025-05-21T10:54:52.326000",
      "trend_date": "2025-05-21T10:54:52.326000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:52.327000"
    },
    {
      "id": 635,
      "name": "pandas-finance",
      "full_name": "davidastephens/pandas-finance",
      "owner": "davidastephens",
      "description": "High level API for access to and analysis of financial data.",
      "url": "https://github.com/davidastephens/pandas-finance",
      "language": "Python",
      "stars": 155,
      "forks": 18,
      "tags": [],
      "created_at": "2025-05-21T10:54:56.437000",
      "updated_at": "2025-05-21T10:54:56.437000",
      "trend_date": "2025-05-21T10:54:56.437000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:54:56.437000"
    },
    {
      "id": 636,
      "name": "Quantropy",
      "full_name": "AlainDaccache/Quantropy",
      "owner": "AlainDaccache",
      "description": "Financial pipeline for the data-driven investor to research, develop and deploy robust strategies. Big Data ingestion, risk factor modeling, stock screening, portfolio optimization, and broker API.",
      "url": "https://github.com/AlainDaccache/Quantropy",
      "language": "Python",
      "stars": 150,
      "forks": 33,
      "tags": [
        "broker-api",
        "edgar",
        "finance",
        "financial-data",
        "financial-markets",
        "fundamental-analysis",
        "machine-learning",
        "portfolio-construction",
        "portfolio-optimization",
        "quantitative-finance",
        "strategies",
        "trading"
      ],
      "created_at": "2025-05-21T10:55:00.575000",
      "updated_at": "2025-05-21T10:55:00.575000",
      "trend_date": "2025-05-21T10:55:00.575000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:00.575000"
    },
    {
      "id": 637,
      "name": "stockdex",
      "full_name": "ahnazary/stockdex",
      "owner": "ahnazary",
      "description": "Python Package to Extract and plot Financial Data",
      "url": "https://github.com/ahnazary/stockdex",
      "language": "Python",
      "stars": 148,
      "forks": 12,
      "tags": [
        "api",
        "market-data",
        "pandas",
        "python",
        "yahoo-finance",
        "yahoo-finance-api"
      ],
      "created_at": "2025-05-21T10:55:04.584000",
      "updated_at": "2025-05-21T10:55:04.584000",
      "trend_date": "2025-05-21T10:55:04.584000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:04.584000"
    },
    {
      "id": 638,
      "name": "Australian-Open-Banking-Data-Database",
      "full_name": "LukePrior/Australian-Open-Banking-Data-Database",
      "owner": "LukePrior",
      "description": "This is an ongoing collection of Open Banking Data APIs for Australian deposit taking institutions.",
      "url": "https://github.com/LukePrior/Australian-Open-Banking-Data-Database",
      "language": "Python",
      "stars": 140,
      "forks": 11,
      "tags": [
        "api",
        "australia",
        "banking",
        "banking-apis",
        "cdr",
        "consumer-data",
        "financial",
        "fintech",
        "hacktoberfest",
        "open-banking"
      ],
      "created_at": "2025-05-21T10:55:08.652000",
      "updated_at": "2025-05-21T10:55:08.652000",
      "trend_date": "2025-05-21T10:55:08.652000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:08.652000"
    },
    {
      "id": 639,
      "name": "sdk_python",
      "full_name": "bunq/sdk_python",
      "owner": "bunq",
      "description": "Python SDK for bunq API",
      "url": "https://github.com/bunq/sdk_python",
      "language": "Python",
      "stars": 113,
      "forks": 27,
      "tags": [
        "bank",
        "banking-api",
        "bunq-api",
        "financial",
        "python",
        "python-sdk",
        "sdks"
      ],
      "created_at": "2025-05-21T10:55:12.686000",
      "updated_at": "2025-05-21T10:55:12.686000",
      "trend_date": "2025-05-21T10:55:12.686000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:12.687000"
    },
    {
      "id": 640,
      "name": "federal-treasury-api",
      "full_name": "csvsoundsystem/federal-treasury-api",
      "owner": "csvsoundsystem",
      "description": "The scraper, parser, and database creation scripts for Financial Management Service daily U.S. Treasury statements.",
      "url": "https://github.com/csvsoundsystem/federal-treasury-api",
      "language": "Python",
      "stars": 105,
      "forks": 27,
      "tags": [],
      "created_at": "2025-05-21T10:55:18.227000",
      "updated_at": "2025-05-21T10:55:18.227000",
      "trend_date": "2025-05-21T10:55:18.227000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:18.228000"
    },
    {
      "id": 641,
      "name": "pykuda",
      "full_name": "sir-temi/pykuda",
      "owner": "sir-temi",
      "description": "PyKuda is a Python package designed to simplify interactions with financial APIs, enabling developers to integrate banking services effortlessly into their applications. Leveraging secure authentication through API keys and tokens, PyKuda ensures efficient and reliable financial transactions.",
      "url": "https://github.com/sir-temi/pykuda",
      "language": "Python",
      "stars": 100,
      "forks": 94,
      "tags": [
        "fintech-api",
        "naija",
        "python"
      ],
      "created_at": "2025-05-21T10:55:20.795000",
      "updated_at": "2025-05-21T10:55:20.795000",
      "trend_date": "2025-05-21T10:55:20.795000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:20.796000"
    },
    {
      "id": 642,
      "name": "fintech-api",
      "full_name": "Clueless-Community/fintech-api",
      "owner": "Clueless-Community",
      "description": "An API that helps you to deal with your financial calculations",
      "url": "https://github.com/Clueless-Community/fintech-api",
      "language": "Python",
      "stars": 99,
      "forks": 106,
      "tags": [
        "fastapi",
        "python3"
      ],
      "created_at": "2025-05-21T10:55:23.345000",
      "updated_at": "2025-05-21T10:55:23.345000",
      "trend_date": "2025-05-21T10:55:23.345000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:23.345000"
    },
    {
      "id": 643,
      "name": "finance_calendars",
      "full_name": "s-kerin/finance_calendars",
      "owner": "s-kerin",
      "description": "Simple wrapper of NASDAQ public API for Financial Calendars, provides data on earnings calendar, IPO calendar, dividends calendar etc for ALL US stocks.",
      "url": "https://github.com/s-kerin/finance_calendars",
      "language": "Python",
      "stars": 60,
      "forks": 13,
      "tags": [
        "calendar",
        "dividends",
        "earnings",
        "finance",
        "ipo",
        "stocks"
      ],
      "created_at": "2025-05-21T10:55:27.465000",
      "updated_at": "2025-05-21T10:55:27.465000",
      "trend_date": "2025-05-21T10:55:27.465000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:27.466000"
    },
    {
      "id": 644,
      "name": "EODHD-APIs-Python-Financial-Library",
      "full_name": "EodHistoricalData/EODHD-APIs-Python-Financial-Library",
      "owner": "EodHistoricalData",
      "description": "",
      "url": "https://github.com/EodHistoricalData/EODHD-APIs-Python-Financial-Library",
      "language": "Python",
      "stars": 57,
      "forks": 16,
      "tags": [
        "eod-historical-data",
        "eodhistoricaldata",
        "python3",
        "technical-analysis",
        "trading"
      ],
      "created_at": "2025-05-21T10:55:30.025000",
      "updated_at": "2025-05-21T10:55:30.025000",
      "trend_date": "2025-05-21T10:55:30.025000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:30.025000"
    },
    {
      "id": 645,
      "name": "pyfmpcloud",
      "full_name": "razorhash/pyfmpcloud",
      "owner": "razorhash",
      "description": "A python wrapper for the Financial Model Prep API for analysis of public companies",
      "url": "https://github.com/razorhash/pyfmpcloud",
      "language": "Python",
      "stars": 50,
      "forks": 9,
      "tags": [],
      "created_at": "2025-05-21T10:55:40.250000",
      "updated_at": "2025-05-21T10:55:40.250000",
      "trend_date": "2025-05-21T10:55:40.250000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:40.250000"
    },
    {
      "id": 675,
      "name": "sdk_java",
      "full_name": "bunq/sdk_java",
      "owner": "bunq",
      "description": "Java SDK for bunq API",
      "url": "https://github.com/bunq/sdk_java",
      "language": "Java",
      "stars": 49,
      "forks": 24,
      "tags": [
        "bank",
        "banking-api",
        "bunq-api",
        "financial",
        "java",
        "java-sdk",
        "payment",
        "sdk"
      ],
      "created_at": "2025-05-21T10:56:55.729000",
      "updated_at": "2025-05-21T10:56:55.729000",
      "trend_date": "2025-05-21T10:56:55.729000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:55.729000"
    },
    {
      "id": 646,
      "name": "Automatic-fundamental-investment-valuation",
      "full_name": "bben1/Automatic-fundamental-investment-valuation",
      "owner": "bben1",
      "description": "Automatically performs the DCF calculation, sensitivity analysis and Piotroski f-score analysis for a given company. All financial data collected via the financialmodelingprep API.",
      "url": "https://github.com/bben1/Automatic-fundamental-investment-valuation",
      "language": "Python",
      "stars": 47,
      "forks": 9,
      "tags": [],
      "created_at": "2025-05-21T10:55:44.321000",
      "updated_at": "2025-05-21T10:55:44.321000",
      "trend_date": "2025-05-21T10:55:44.321000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:44.321000"
    },
    {
      "id": 647,
      "name": "financial-news-api-python",
      "full_name": "FinancialNewsAPI/financial-news-api-python",
      "owner": "FinancialNewsAPI",
      "description": "Stock market & financial news API with more than 50 million news articles, and real-time news streaming API in Python.",
      "url": "https://github.com/FinancialNewsAPI/financial-news-api-python",
      "language": "Python",
      "stars": 44,
      "forks": 4,
      "tags": [
        "newsapi",
        "stock-market-news-api"
      ],
      "created_at": "2025-05-21T10:55:46.901000",
      "updated_at": "2025-05-21T10:55:46.901000",
      "trend_date": "2025-05-21T10:55:46.901000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:46.902000"
    },
    {
      "id": 648,
      "name": "Virtual-Bank",
      "full_name": "GoldenThrust/Virtual-Bank",
      "owner": "GoldenThrust",
      "description": "Virtual Bank API. Simulating real banking systems for developers, offering a secure, user-friendly environment to test financial transactions within web/mobile apps. Enhance API integration with robust, simulated transactions.",
      "url": "https://github.com/GoldenThrust/Virtual-Bank",
      "language": "Python",
      "stars": 40,
      "forks": 18,
      "tags": [
        "alx-africa",
        "banking-system",
        "django",
        "django-application",
        "neon-postgresql",
        "neondb",
        "postgresql",
        "python"
      ],
      "created_at": "2025-05-21T10:55:49.492000",
      "updated_at": "2025-05-21T10:55:49.492000",
      "trend_date": "2025-05-21T10:55:49.492000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:49.493000"
    },
    {
      "id": 649,
      "name": "fmd",
      "full_name": "ycytai/fmd",
      "owner": "ycytai",
      "description": "Download Taiwan financial market data via FMD API.",
      "url": "https://github.com/ycytai/fmd",
      "language": "Python",
      "stars": 30,
      "forks": 0,
      "tags": [
        "api",
        "etf",
        "financial-data",
        "market-data",
        "open-data",
        "python",
        "stock-data",
        "stock-market",
        "taiwan",
        "taiwan-etf",
        "taiwan-stock-market"
      ],
      "created_at": "2025-05-21T10:55:53.689000",
      "updated_at": "2025-05-21T10:55:53.689000",
      "trend_date": "2025-05-21T10:55:53.689000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:53.689000"
    },
    {
      "id": 650,
      "name": "finqual",
      "full_name": "harryy-he/finqual",
      "owner": "harryy-he",
      "description": "This is a work in progress package that enables users to conduct fundamental financial research, utilising the SEC's data and REST API.",
      "url": "https://github.com/harryy-he/finqual",
      "language": "Python",
      "stars": 27,
      "forks": 7,
      "tags": [],
      "created_at": "2025-05-21T10:55:55.991000",
      "updated_at": "2025-05-21T10:55:55.991000",
      "trend_date": "2025-05-21T10:55:55.991000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:55.992000"
    },
    {
      "id": 651,
      "name": "FinMesh",
      "full_name": "MichaelPHartmann/FinMesh",
      "owner": "MichaelPHartmann",
      "description": "A python package that brings together financial and economic data.",
      "url": "https://github.com/MichaelPHartmann/FinMesh",
      "language": "Python",
      "stars": 26,
      "forks": 5,
      "tags": [
        "api",
        "finance",
        "fred",
        "government",
        "iex",
        "package",
        "usa",
        "valuation",
        "wrapper"
      ],
      "created_at": "2025-05-21T10:55:58.265000",
      "updated_at": "2025-05-21T10:55:58.265000",
      "trend_date": "2025-05-21T10:55:58.265000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:55:58.265000"
    },
    {
      "id": 652,
      "name": "pyOnvista",
      "full_name": "cloasdata/pyOnvista",
      "owner": "cloasdata",
      "description": "A tiny API for onvista.de financial website.",
      "url": "https://github.com/cloasdata/pyOnvista",
      "language": "Python",
      "stars": 24,
      "forks": 7,
      "tags": [
        "banking",
        "finance",
        "onvista",
        "trading"
      ],
      "created_at": "2025-05-21T10:56:00.556000",
      "updated_at": "2025-05-21T10:56:00.556000",
      "trend_date": "2025-05-21T10:56:00.556000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:00.556000"
    },
    {
      "id": 676,
      "name": "AI_Trader",
      "full_name": "Hortensie/AI_Trader",
      "owner": "Hortensie",
      "description": "ML Financial API",
      "url": "https://github.com/Hortensie/AI_Trader",
      "language": "Java",
      "stars": 22,
      "forks": 8,
      "tags": [
        "financial",
        "firebase-db",
        "machine-learning",
        "mockito",
        "rest-api",
        "rxjava-android",
        "rxjava2",
        "trader",
        "trading-algorithms",
        "trading-api",
        "trading-platform",
        "trading-simulator",
        "trading-strategies"
      ],
      "created_at": "2025-05-21T10:56:58.010000",
      "updated_at": "2025-05-21T10:56:58.010000",
      "trend_date": "2025-05-21T10:56:58.010000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:58.010000"
    },
    {
      "id": 653,
      "name": "GFMS-Core",
      "full_name": "KOSASIH/GFMS-Core",
      "owner": "KOSASIH",
      "description": "The core backend implementation of the Global Financial Management System, including transaction management, user authentication, and API integrations.",
      "url": "https://github.com/KOSASIH/GFMS-Core",
      "language": "Python",
      "stars": 21,
      "forks": 2,
      "tags": [
        "finance",
        "finance-management",
        "fintech"
      ],
      "created_at": "2025-05-21T10:56:02.840000",
      "updated_at": "2025-05-21T10:56:02.840000",
      "trend_date": "2025-05-21T10:56:02.840000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:02.840000"
    },
    {
      "id": 654,
      "name": "ProjectAlpha",
      "full_name": "Nikkitaseth/ProjectAlpha",
      "owner": "Nikkitaseth",
      "description": "PYTHON CODE WALKTHROUGH Data Sourcing In order to run a discounted cash flow model (DCF), I needed data, so I found a free API that provided us with everything I needed. I wrote a code that saved every financial statement of every company in a separate text file. In this code, I asked to ping the API’s URL for every ticker, open a text file for one of the financial statements for one company ticker, dump all the data found by the code into this file, and close it. This process was repeated for every company in our company list and every statement I have a code for. By doing so I Ire able to store the data for every company locally and did not need to ping the API every time I ran our code. Once all the financial data for each company was stored in form of a balance sheet, income statement, cash flow statement, and company profile text file, I needed to pick out specific items required for our DCF model. Thus, I defined the functions that selected all required items from the respective financial statements of each company and assigned them to a variable using utils.py.  Discounted Cash Flow Model First of all, I needed to import the functions I defined in utils.py before defining the DCF model function, which would run for every company in our list. Next, I ensured to have 5 consecutive years of past data to compute the average. Thus, the first few lines of code checked whether the last year on record was 2019 from which point I would go back 5 years; if the last year was 2018, this would be taken as the first data entry from which I would go back 5 years. The second part mentioned above is important because companies file their 10-K, i.e. their annual report, at different times throughout the year so there may be companies that already filed their reports while others had not. After this step, five-year averages of every item’s percentage of revenue Ire calculated as Ill as the average revenue growth over the same period. These items included EBIT, depreciation & amortization, capital expenditures, and the change in net working capital. Once that was done, there Ire only three variables missing before calculating free cash flows for the next few years: a discount or hurdle rate; industry-specific perpetual growth rates; and a tax rate. After these three variables Ire set up, the next step was to calculate the free cash flows to the firm (fcff) for the next 5 years and determine the terminal value at the end of the period using the growth rate for the corresponding industry. For the former, I use a loop to calculate the fcff for all the year, discount it, and add it to one variable called fcffpv. Once the terminal value was calculated, these two additional numbers captured the enterprise value of the firm. Since I Ire interested in the equity value, I subtracted debt and add cash, which left us with the equity value. In one final step, I divided this value by the number of shares to end up with an intrinsic value per share. After calculating the intrinsic value per share, I compared it to the current share price with two additions. First, I added a buffer to minimize our downside risk for inaccuracy in calculations, which is called the margin of safety. Here, the intrinsic value should at least be 115% of the current share price. I also set an upper limit at 130% to ensure I would not include companies with extraordinarily high valuations, compared to their current price. If the share price calculated fell within this window, I added its ticker to a dataframe, which was the last step in the function. As such, the DCF function would run for every company and provide a dataframe with the tickers of all those companies that Ire undervalued at the time and fell within the 115% - 130% range.  Portfolio Optimization The dataframe with the tickers of all the undervalued companies that was previously created has now become the portfolio, which I converted into a list and used as the source for further optimization that is about to come. Some general inputs for the rest of the code Ire the start and end date of the data I requested for optimization, as Ill as the risk-free rate and the number of simulations I wanted to run our optimizations for. Now that the general framework has been created, it is time to choose some conditioning variables to measure the performance of investment in one sector or across a combination of some/all sectors, respectively.  Project Alpha uses the following conditioning variables to optimize its portfolios: • Sharpe Ratio: It measures the performance of an investment compared to the risk-free asset, i.e. the 10-year Treasury Bond, after adjusting for its risk factor or standard deviation. The Sharpe ratio would be given a higher Iight for investors who have a higher risk tolerance.  In terms of code, I used the bt package to retrieve the data betIen the predetermined start and end date for the companies in our ticker list. This data was then used to find the portfolio with the highest Sharpe ratio. For that, random Iights Ire assigned to each company and the ratio was computed. After running the number of simulations previously determined, the Iights with the highest Sharpe ratio will be located using loc() and labeled ‘sharpe_portfolio’ which is a dataframe containing the excess return, the volatility, Sharpe ratio, as Ill as the Iights for every company. I also located the portfolio with the loIst volatility, put it in a dataframe called ‘min_volatility_port’ which has the same attributes. The rest of the code of this segment simply created a picture with all the portfolios generated, displaying the efficient frontier and highlighting the portfolio with the highest Sharpe ratio and loIst volatility. • Value at Risk (VaR): VaR was chosen as a diagnostic tool to assess the model. In our case, it basically indicated the percentage of time in which a loss greater than 1% would occur over a period of 5 years. Its limitation is that although it measures how bad the best of the bad is, it does not measure how bad it can get, meaning the worst of the worst. In regards to the code, I first requested the adjusted closing for the companies in our ticker list in the determined time horizon. I then retrieved the Iights from our Sharpe portfolio, set the number of days I wanted to simulate as Ill as the cutoff, before calculating the returns of every company in every period; here: daily. Thereafter, I created a new variable called ‘sigma’, which was be a copy of our return variable, in order to ensure the right format and type for our Monte Carlo loop. The simulation is pretty straight forward, as it measures how many runs the returns fall within 1% or outside of it. I then Iighed the resulting returns by the Iight of the company in the portfolio and whenever the portfolio return was outside the set boundary, it would count as a ‘bad simulation’. Once that is done, the number of bad simulations was divided by the total number of simulations to end up with a percentage of how many simulations were bad, which equals our VaR • Treynor Ratio: For the investors that already have a perfectly diversified portfolio and would like to add more assets to it, there would be a higher Iight on the Treynor ratio. It basically uses beta as a risk factor because it carries the risk relative to the market, instead of standard deviation as in Sharpe, meaning only systematic or non-diversifiable risk.  For the code, I first calculated the portfolio’s beta. For that, I defined a function ‘beta’ that reads the beta of every company and returns it. The next step is to run a loop that would enter the beta of every company in our ticker list into a new dataframe. After setting the index equal to the tickers and transposing the Sharpe portfolio Iights, I can concat the two thus resulting in two columns: one is the beta of every company and the second is the corresponding Iight in the portfolio. I then created a third column as the product of columns one and two. The sum of all entries in that column is the portfolio beta, which was then used as the denominator for the ratio. The nominator was already calculated as ‘Excess Return’ in the Sharpe portfolio. • Sortino Ratio: The Sortino ratio measures only the downside risk (downside deviation or semi-deviation) by measuring returns against a minimum acceptable return, 𝜏. It is surprising to know that most of the industry ignores the total number of periods taken and just calculates the downside deviation by choosing the periods with downside risk, which results in misleading results. Project Alpha uses all the periods to calculate the same, so as to have an advantage over those robo-advisors/financial advisors that do not follow this process. The alpha in the future would be generated by going long on companies with high correct Sortino and low incorrect Sortino as they are undervalued, and shorting those with low correct Sortino and high incorrect Sortino as these are overvalued. The Sortino ratio would be given more Iight for investors who are more risk averse.  This part of the code started with retrieving the data for our benchmark, the S&P 500, for the period and the calculating the average daily and annual return. After that, I calculate the portfolio returns, ‘returns[“Returns”]’, by adding the products of every company’s Iight times its return, which gave us the portfolio return for every period. From here, I calculated the downside risk by comparing the portfolio return in every period to the daily average return of our benchmark in a for loop. Before I did that, I defined a new variable called ‘semi’, which is a data series and will be filled with whatever comes out of the loop every single time. If the portfolio return minus the average daily return of the benchmark was greater than 0 – meaning the portfolio earned more than the average of the S&P500 – the value for the period was set to 0 and added to the semi data series. If it is 0, which is extremely unlikely, but whatever, it would also be 0. If it is less than 0, hoIver, which indicates underperformance, I would square the portfolio return, which already gives us the semi variance I need for our next step. From here, I can simply take the square root of the average of the ‘semi’ data series to get the daily downside risk and multiplying it by the square root of 252, which gives us the annual number. After that, I have all the numbers to calculate the Sortino ratio. • Information Ratio: The information ratio measures the portfolio returns compared to the returns of a benchmark index, i.e. S&P500, after adjusting for its additional risk. It only looks at the excess return of the portfolio over the benchmark and the volatility or risk associated with it. I already have all the inputs I need to calculate his ratio. Thus, I simply created a new dataframe with the portfolio returns of every period and the benchmark returns of every period. To find the excess return, i.e. the nominator, I simply subtracted the latter from the former and assigned it to a new variable, which I called ‘excess_return’. The nominator would be the average return of the portfolio minus the average return of the benchmark, and the denominator would be the standard deviation of the ‘excess_return’ series. Finally, I printed short sentences with the results for every conditioning variable just described as an output in the console.",
      "url": "https://github.com/Nikkitaseth/ProjectAlpha",
      "language": "Python",
      "stars": 21,
      "forks": 8,
      "tags": [],
      "created_at": "2025-05-21T10:56:05.114000",
      "updated_at": "2025-05-21T10:56:05.114000",
      "trend_date": "2025-05-21T10:56:05.114000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:05.117000"
    },
    {
      "id": 655,
      "name": "Hack-Agent-Server",
      "full_name": "yashksaini-coder/Hack-Agent-Server",
      "owner": "yashksaini-coder",
      "description": "Developed a Web search and Financial Analyst AI agent team Scraping web to provide real time data, and streamlined in real time as API service | https://hack-agent-server-hiwy.onrender.com/",
      "url": "https://github.com/yashksaini-coder/Hack-Agent-Server",
      "language": "Python",
      "stars": 19,
      "forks": 5,
      "tags": [
        "agno",
        "ai",
        "aiagent"
      ],
      "created_at": "2025-05-21T10:56:07.391000",
      "updated_at": "2025-05-21T10:56:07.391000",
      "trend_date": "2025-05-21T10:56:07.391000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:07.392000"
    },
    {
      "id": 656,
      "name": "currency-exporter",
      "full_name": "luizbizzio/currency-exporter",
      "owner": "luizbizzio",
      "description": "💱 A Prometheus exporter written in Python to collect currency exchange rates and expose them as metrics. This tool provides real-time data on various exchange rates, enabling integration with monitoring systems for financial applications.",
      "url": "https://github.com/luizbizzio/currency-exporter",
      "language": "Python",
      "stars": 19,
      "forks": 0,
      "tags": [
        "api",
        "automation",
        "currencies",
        "currency",
        "currency-converter",
        "currency-exchange-rates",
        "data-visualization",
        "economy",
        "exporter",
        "grafana",
        "grafana-dashboard",
        "homeautomation",
        "iot",
        "metrics",
        "monitoring",
        "open-source",
        "prometheus",
        "prometheus-exporter",
        "python",
        "real-time"
      ],
      "created_at": "2025-05-21T10:56:09.625000",
      "updated_at": "2025-05-21T10:56:09.625000",
      "trend_date": "2025-05-21T10:56:09.625000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:09.625000"
    },
    {
      "id": 657,
      "name": "nordnet",
      "full_name": "ntftrader/nordnet",
      "owner": "ntftrader",
      "description": "Uonfficial wrapper for financial data api from the Scandinavian broker Nordnet",
      "url": "https://github.com/ntftrader/nordnet",
      "language": "Python",
      "stars": 18,
      "forks": 7,
      "tags": [
        "commodities",
        "derivatives",
        "etfs",
        "forex",
        "intraday",
        "orderbook",
        "stock",
        "stock-market",
        "tick",
        "trading"
      ],
      "created_at": "2025-05-21T10:56:11.906000",
      "updated_at": "2025-05-21T10:56:11.906000",
      "trend_date": "2025-05-21T10:56:11.906000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:11.906000"
    },
    {
      "id": 658,
      "name": "Pandas_Market_Predictor",
      "full_name": "Code-IA-Insights/Pandas_Market_Predictor",
      "owner": "Code-IA-Insights",
      "description": "Pandas Market Predictor, is a deep learning API written in Python on top of Panda that helping you predict future price (low and min), trend of Financial market assets.",
      "url": "https://github.com/Code-IA-Insights/Pandas_Market_Predictor",
      "language": "Python",
      "stars": 17,
      "forks": 6,
      "tags": [
        "ai",
        "machine-learning",
        "quantitative-finance",
        "quantum-computing",
        "trading",
        "trading-algorithms",
        "trading-bot"
      ],
      "created_at": "2025-05-21T10:56:14.141000",
      "updated_at": "2025-05-21T10:56:14.141000",
      "trend_date": "2025-05-21T10:56:14.141000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:14.142000"
    },
    {
      "id": 659,
      "name": "expense-tracker",
      "full_name": "sebastian-quintero/expense-tracker",
      "owner": "sebastian-quintero",
      "description": "Track financials with Twilio's WhatsApp API",
      "url": "https://github.com/sebastian-quintero/expense-tracker",
      "language": "Python",
      "stars": 15,
      "forks": 2,
      "tags": [
        "fastapi",
        "mysql",
        "sqlmodel",
        "twilio",
        "whatsapp"
      ],
      "created_at": "2025-05-21T10:56:16.438000",
      "updated_at": "2025-05-21T10:56:16.438000",
      "trend_date": "2025-05-21T10:56:16.438000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:16.439000"
    },
    {
      "id": 660,
      "name": "streamlit-yfinance",
      "full_name": "alphasecio/streamlit-yfinance",
      "owner": "alphasecio",
      "description": "A Streamlit app for simple financial analysis using YFinance API.",
      "url": "https://github.com/alphasecio/streamlit-yfinance",
      "language": "Python",
      "stars": 14,
      "forks": 7,
      "tags": [
        "python",
        "stocks",
        "streamlit",
        "yahoo-finance"
      ],
      "created_at": "2025-05-21T10:56:18.715000",
      "updated_at": "2025-05-21T10:56:18.715000",
      "trend_date": "2025-05-21T10:56:18.715000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:18.715000"
    },
    {
      "id": 661,
      "name": "GPT-FastAPI-RoboAdvisor",
      "full_name": "TheAIQuant/GPT-FastAPI-RoboAdvisor",
      "owner": "TheAIQuant",
      "description": "🤖 Robo Advisor 📈: A powerful Python-based Robo Advisor using OpenAI's Chat GPT, FastAPI, and financial data for intelligent investment advice. 💰🚀",
      "url": "https://github.com/TheAIQuant/GPT-FastAPI-RoboAdvisor",
      "language": "Python",
      "stars": 13,
      "forks": 6,
      "tags": [],
      "created_at": "2025-05-21T10:56:20.990000",
      "updated_at": "2025-05-21T10:56:20.990000",
      "trend_date": "2025-05-21T10:56:20.990000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:20.990000"
    },
    {
      "id": 662,
      "name": "FinanceAgent",
      "full_name": "AI-Hub-Admin/FinanceAgent",
      "owner": "AI-Hub-Admin",
      "description": "Open Financial API of Realtime Financial Data including Stock Price Quote, Major Index from Global Market, Options to Build Financial AI Agents.",
      "url": "https://github.com/AI-Hub-Admin/FinanceAgent",
      "language": "Python",
      "stars": 13,
      "forks": 1,
      "tags": [
        "agents",
        "stock"
      ],
      "created_at": "2025-05-21T10:56:23.232000",
      "updated_at": "2025-05-21T10:56:23.232000",
      "trend_date": "2025-05-21T10:56:23.232000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:23.232000"
    },
    {
      "id": 663,
      "name": "SWIFT-EA",
      "full_name": "ashrajesh/SWIFT-EA",
      "owner": "ashrajesh",
      "description": "Chainlink external adapter that enables SWIFT financial message data to be accessed by smart contracts via gpi API.",
      "url": "https://github.com/ashrajesh/SWIFT-EA",
      "language": "Python",
      "stars": 13,
      "forks": 2,
      "tags": [
        "chainlink",
        "chainlink-adapter",
        "payments",
        "smart-contracts",
        "swift",
        "swift-ea",
        "swift-financial-messages"
      ],
      "created_at": "2025-05-21T10:56:25.540000",
      "updated_at": "2025-05-21T10:56:25.540000",
      "trend_date": "2025-05-21T10:56:25.540000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:25.540000"
    },
    {
      "id": 664,
      "name": "Cryptocurrency-Dashboard",
      "full_name": "tharifansari/Cryptocurrency-Dashboard",
      "owner": "tharifansari",
      "description": "A web application to view the percentage difference and do financial technical analysis on real-time cryptocurrency data using flask web framework, ccxt trading api and tulipy library.",
      "url": "https://github.com/tharifansari/Cryptocurrency-Dashboard",
      "language": "Python",
      "stars": 13,
      "forks": 1,
      "tags": [
        "cryptocurrency",
        "css",
        "flask",
        "html",
        "js",
        "python"
      ],
      "created_at": "2025-05-21T10:56:27.836000",
      "updated_at": "2025-05-21T10:56:27.836000",
      "trend_date": "2025-05-21T10:56:27.836000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:27.836000"
    },
    {
      "id": 665,
      "name": "SingleStore-Finance-Advisor",
      "full_name": "ayushpai/SingleStore-Finance-Advisor",
      "owner": "ayushpai",
      "description": "Using OpenAI Assistants API and SingleStore for a Voice-Activated Financial Advisor",
      "url": "https://github.com/ayushpai/SingleStore-Finance-Advisor",
      "language": "Python",
      "stars": 11,
      "forks": 3,
      "tags": [],
      "created_at": "2025-05-21T10:56:30.113000",
      "updated_at": "2025-05-21T10:56:30.113000",
      "trend_date": "2025-05-21T10:56:30.113000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:30.113000"
    },
    {
      "id": 666,
      "name": "finance-query",
      "full_name": "Verdenroz/finance-query",
      "owner": "Verdenroz",
      "description": "Open-source API for financial data. Get quotes, historical data, technical indicators, and more.",
      "url": "https://github.com/Verdenroz/finance-query",
      "language": "Python",
      "stars": 11,
      "forks": 2,
      "tags": [
        "aws-apigateway",
        "aws-lambda",
        "docker",
        "fastapi",
        "google-finance",
        "python",
        "redis",
        "stocks",
        "websockets",
        "yahoo-finance"
      ],
      "created_at": "2025-05-21T10:56:32.397000",
      "updated_at": "2025-05-21T10:56:32.397000",
      "trend_date": "2025-05-21T10:56:32.397000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:32.397000"
    },
    {
      "id": 667,
      "name": "Django-ledger",
      "full_name": "tobistudio/Django-ledger",
      "owner": "tobistudio",
      "description": "An Accounting, Bookkeeping & Financial Analysis Engine for the Django Framework. Django Ledger is a double entry accounting system, which aims to power financially driven applications by removing the complexity of the accounting domain into a simple, high-level API.",
      "url": "https://github.com/tobistudio/Django-ledger",
      "language": "Python",
      "stars": 11,
      "forks": 2,
      "tags": [
        "dev",
        "django",
        "ledger"
      ],
      "created_at": "2025-05-21T10:56:34.630000",
      "updated_at": "2025-05-21T10:56:34.630000",
      "trend_date": "2025-05-21T10:56:34.630000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:34.631000"
    },
    {
      "id": 668,
      "name": "yfinance-api",
      "full_name": "Karthik005/yfinance-api",
      "owner": "Karthik005",
      "description": "Financial information API for Python.",
      "url": "https://github.com/Karthik005/yfinance-api",
      "language": "Python",
      "stars": 10,
      "forks": 3,
      "tags": [],
      "created_at": "2025-05-21T10:56:36.869000",
      "updated_at": "2025-05-21T10:56:36.869000",
      "trend_date": "2025-05-21T10:56:36.869000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:36.869000"
    },
    {
      "id": 669,
      "name": "papertrail-ai",
      "full_name": "papertrail-ai/papertrail-ai",
      "owner": "papertrail-ai",
      "description": "An API wrapper specifically for financial systems (invoicing, accounting, payroll, and ERP systems). ",
      "url": "https://github.com/papertrail-ai/papertrail-ai",
      "language": "Python",
      "stars": 10,
      "forks": 6,
      "tags": [
        "api",
        "api-gateway",
        "api-wrapper",
        "automa",
        "automation",
        "erp-systems",
        "freeagent",
        "freshbooks",
        "invoicing",
        "machine-learning",
        "machine-vision",
        "machinelearning",
        "payroll",
        "sage",
        "xero",
        "zoho"
      ],
      "created_at": "2025-05-21T10:56:39.096000",
      "updated_at": "2025-05-21T10:56:39.096000",
      "trend_date": "2025-05-21T10:56:39.096000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:39.097000"
    },
    {
      "id": 670,
      "name": "StockWatcherAPI",
      "full_name": "SaiWebApps/StockWatcherAPI",
      "owner": "SaiWebApps",
      "description": "Consolidate financials, headlines, and related companies info for a user-specified set of stock symbols.",
      "url": "https://github.com/SaiWebApps/StockWatcherAPI",
      "language": "Python",
      "stars": 10,
      "forks": 1,
      "tags": [],
      "created_at": "2025-05-21T10:56:41.355000",
      "updated_at": "2025-05-21T10:56:41.355000",
      "trend_date": "2025-05-21T10:56:41.355000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:41.356000"
    },
    {
      "id": 671,
      "name": "scrilla",
      "full_name": "chinchalinchin/scrilla",
      "owner": "chinchalinchin",
      "description": "A python application that wraps around various financial APIs, calculates statistics and optimizes portfolio allocations.",
      "url": "https://github.com/chinchalinchin/scrilla",
      "language": "Python",
      "stars": 10,
      "forks": 1,
      "tags": [
        "alphavantage",
        "finance",
        "government",
        "iex",
        "portfolio-optimization",
        "pyqt",
        "python",
        "quandl",
        "quantitative-finance",
        "scipy",
        "statistics",
        "trading"
      ],
      "created_at": "2025-05-21T10:56:43.594000",
      "updated_at": "2025-05-21T10:56:43.594000",
      "trend_date": "2025-05-21T10:56:43.594000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:43.595000"
    },
    {
      "id": 677,
      "name": "deutsche-bank-api-program",
      "full_name": "deutschebank/deutsche-bank-api-program",
      "owner": "deutschebank",
      "description": "Open banking nowadays is not just a fashionable term, but has found its way into the everyday life of many financial service providers. With the API Program, Deutsche Bank makes a large amount of customer data accessible to third parties via public APIs. The technical cornerstone of this is the Developer Portal. With this repo, we would like to make it a little easier for interested developers to access our APIs, documentation and the sandbox",
      "url": "https://github.com/deutschebank/deutsche-bank-api-program",
      "language": "Java",
      "stars": 10,
      "forks": 1,
      "tags": [],
      "created_at": "2025-05-21T10:57:00.276000",
      "updated_at": "2025-05-21T10:57:00.276000",
      "trend_date": "2025-05-21T10:57:00.276000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:00.276000"
    },
    {
      "id": 672,
      "name": "InvestGPT",
      "full_name": "Joseph-M-Cook/InvestGPT",
      "owner": "Joseph-M-Cook",
      "description": "InvestGPT is a financial chatbot utilizing GPT-4 and various APIs. It quickly delivers relevant financial information, answers questions, and provides real-time stock data, offering efficient financial assistance to users.",
      "url": "https://github.com/Joseph-M-Cook/InvestGPT",
      "language": "Python",
      "stars": 9,
      "forks": 3,
      "tags": [],
      "created_at": "2025-05-21T10:56:45.858000",
      "updated_at": "2025-05-21T10:56:45.858000",
      "trend_date": "2025-05-21T10:56:45.858000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:45.859000"
    },
    {
      "id": 673,
      "name": "webscrap_headlines",
      "full_name": "philippe-ostiguy/webscrap_headlines",
      "owner": "philippe-ostiguy",
      "description": "📡 Access Historical Financial News Headlines with Python.",
      "url": "https://github.com/philippe-ostiguy/webscrap_headlines",
      "language": "Python",
      "stars": 8,
      "forks": 5,
      "tags": [
        "api",
        "data-analysis",
        "data-science",
        "database",
        "machine-learning",
        "natural-language-processing",
        "nlp",
        "python",
        "selenium",
        "sentiment-analysis",
        "sqlite3",
        "webscraping"
      ],
      "created_at": "2025-05-21T10:56:48.130000",
      "updated_at": "2025-05-21T10:56:48.130000",
      "trend_date": "2025-05-21T10:56:48.130000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:56:48.130000"
    },
    {
      "id": 678,
      "name": "market-financial-ratios",
      "full_name": "otavioa/market-financial-ratios",
      "owner": "otavioa",
      "description": "API for Market Financial Ratios (mainly for Brazil)",
      "url": "https://github.com/otavioa/market-financial-ratios",
      "language": "Java",
      "stars": 8,
      "forks": 4,
      "tags": [],
      "created_at": "2025-05-21T10:57:02.544000",
      "updated_at": "2025-05-21T10:57:02.544000",
      "trend_date": "2025-05-21T10:57:02.544000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:02.544000"
    },
    {
      "id": 679,
      "name": "FinancialEngineeringAPI",
      "full_name": "mbuse/FinancialEngineeringAPI",
      "owner": "mbuse",
      "description": "Real hot stuff like Pricing of American PUT Options on Futures of Zero Coupon Bonds in the Binominal Model... Oh my god!!!",
      "url": "https://github.com/mbuse/FinancialEngineeringAPI",
      "language": "Java",
      "stars": 8,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:04.812000",
      "updated_at": "2025-05-21T10:57:04.812000",
      "trend_date": "2025-05-21T10:57:04.812000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:04.812000"
    },
    {
      "id": 680,
      "name": "insynsregistret",
      "full_name": "w3stling/insynsregistret",
      "owner": "w3stling",
      "description": "Java library for extracting data from the Financial Supervisory Authority (Finansinspektionen) PDMR registry.",
      "url": "https://github.com/w3stling/insynsregistret",
      "language": "Java",
      "stars": 7,
      "forks": 5,
      "tags": [
        "api",
        "finansinspektionen",
        "insiderhandel",
        "insynshandel",
        "insynsregistret",
        "pdmr",
        "pdmr-transaction"
      ],
      "created_at": "2025-05-21T10:57:07.084000",
      "updated_at": "2025-05-21T10:57:07.084000",
      "trend_date": "2025-05-21T10:57:07.084000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:07.084000"
    },
    {
      "id": 681,
      "name": "financial-open-banking-showcase",
      "full_name": "Tanzu-Solutions-Engineering/financial-open-banking-showcase",
      "owner": "Tanzu-Solutions-Engineering",
      "description": "Showcase for banking use case such as Open Banking API based on VMware Data Solutions.",
      "url": "https://github.com/Tanzu-Solutions-Engineering/financial-open-banking-showcase",
      "language": "Java",
      "stars": 6,
      "forks": 3,
      "tags": [],
      "created_at": "2025-05-21T10:57:09.390000",
      "updated_at": "2025-05-21T10:57:09.390000",
      "trend_date": "2025-05-21T10:57:09.390000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:09.391000"
    },
    {
      "id": 682,
      "name": "transaction-api-reference-app",
      "full_name": "Mastercard/transaction-api-reference-app",
      "owner": "Mastercard",
      "description": "Demonstrates how the Mastercard Transaction API for Acquirers can be used for the supported operations to request and reply to transaction authorization, reversal, account inquiry, and financial clearing messages without needing a legacy MIP or edge device.",
      "url": "https://github.com/Mastercard/transaction-api-reference-app",
      "language": "Java",
      "stars": 6,
      "forks": 3,
      "tags": [],
      "created_at": "2025-05-21T10:57:11.683000",
      "updated_at": "2025-05-21T10:57:11.684000",
      "trend_date": "2025-05-21T10:57:11.684000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:11.684000"
    },
    {
      "id": 683,
      "name": "banking-app",
      "full_name": "theayushmajumdar/banking-app",
      "owner": "theayushmajumdar",
      "description": "This Spring Boot application serves as a REST API for a banking system. It allows users to manage accounts, transactions, users, perform financial operations such as depositing and withdrawing money , and also delete account.",
      "url": "https://github.com/theayushmajumdar/banking-app",
      "language": "Java",
      "stars": 5,
      "forks": 0,
      "tags": [
        "java",
        "maven",
        "mysql",
        "postman",
        "rest-api",
        "springboot"
      ],
      "created_at": "2025-05-21T10:57:13.930000",
      "updated_at": "2025-05-21T10:57:13.930000",
      "trend_date": "2025-05-21T10:57:13.930000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:13.930000"
    },
    {
      "id": 684,
      "name": "FIX-API-Starter",
      "full_name": "fixapi-org/FIX-API-Starter",
      "owner": "fixapi-org",
      "description": "This is a FIX API based application starter open source repository. We code a typical sample compatible with almost every financial institution.",
      "url": "https://github.com/fixapi-org/FIX-API-Starter",
      "language": "Java",
      "stars": 3,
      "forks": 0,
      "tags": [
        "api-trading",
        "cryptocurrency",
        "fix-api",
        "fixapi",
        "forex",
        "trading"
      ],
      "created_at": "2025-05-21T10:57:16.482000",
      "updated_at": "2025-05-21T10:57:16.482000",
      "trend_date": "2025-05-21T10:57:16.482000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:16.482000"
    },
    {
      "id": 685,
      "name": "yacatecuhtli",
      "full_name": "huasteka/yacatecuhtli",
      "owner": "huasteka",
      "description": "A financial management API",
      "url": "https://github.com/huasteka/yacatecuhtli",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [
        "hibernate",
        "java",
        "spring-boot"
      ],
      "created_at": "2025-05-21T10:57:18.707000",
      "updated_at": "2025-05-21T10:57:18.707000",
      "trend_date": "2025-05-21T10:57:18.707000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:18.707000"
    },
    {
      "id": 686,
      "name": "Yahoo-Financial-Quotes-Java-API",
      "full_name": "mbrown33/Yahoo-Financial-Quotes-Java-API",
      "owner": "mbrown33",
      "description": "Yahoo Financial Quotes Java API",
      "url": "https://github.com/mbrown33/Yahoo-Financial-Quotes-Java-API",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:20.988000",
      "updated_at": "2025-05-21T10:57:20.988000",
      "trend_date": "2025-05-21T10:57:20.988000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:20.989000"
    },
    {
      "id": 687,
      "name": "financial-ratio",
      "full_name": "FaroukBENGHARSSALLAH/financial-ratio",
      "owner": "FaroukBENGHARSSALLAH",
      "description": "A module library that provides a set of APIs to calculate financial ratios.",
      "url": "https://github.com/FaroukBENGHARSSALLAH/financial-ratio",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:23.251000",
      "updated_at": "2025-05-21T10:57:23.251000",
      "trend_date": "2025-05-21T10:57:23.251000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:23.251000"
    },
    {
      "id": 688,
      "name": "simpletransactions-api",
      "full_name": "arcmena/simpletransactions-api",
      "owner": "arcmena",
      "description": "A Java Spring Boot API for testing financial transactions",
      "url": "https://github.com/arcmena/simpletransactions-api",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [
        "hibernate",
        "java",
        "jpa",
        "postgresql",
        "spring-boot"
      ],
      "created_at": "2025-05-21T10:57:25.515000",
      "updated_at": "2025-05-21T10:57:25.515000",
      "trend_date": "2025-05-21T10:57:25.515000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:25.515000"
    },
    {
      "id": 689,
      "name": "finance",
      "full_name": "voscampanha/finance",
      "owner": "voscampanha",
      "description": "REST API Java for a financial application",
      "url": "https://github.com/voscampanha/finance",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:27.793000",
      "updated_at": "2025-05-21T10:57:27.793000",
      "trend_date": "2025-05-21T10:57:27.793000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:27.793000"
    },
    {
      "id": 690,
      "name": "mfsa-pdmr",
      "full_name": "w3stling/mfsa-pdmr",
      "owner": "w3stling",
      "description": "Java library for extracting data from the Malta Financial Services Authority (MFSA) PDMR registry.",
      "url": "https://github.com/w3stling/mfsa-pdmr",
      "language": "Java",
      "stars": 2,
      "forks": 1,
      "tags": [
        "api",
        "malta",
        "mfsa",
        "pdmr",
        "pdmr-transaction"
      ],
      "created_at": "2025-05-21T10:57:30.034000",
      "updated_at": "2025-05-21T10:57:30.034000",
      "trend_date": "2025-05-21T10:57:30.034000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:30.034000"
    },
    {
      "id": 691,
      "name": "dsop-account-consumer-contract",
      "full_name": "Skatteetaten/dsop-account-consumer-contract",
      "owner": "Skatteetaten",
      "description": "A repository for financial institutions and the government agencies. Defines an API contract on several levels",
      "url": "https://github.com/Skatteetaten/dsop-account-consumer-contract",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:32.311000",
      "updated_at": "2025-05-21T10:57:32.311000",
      "trend_date": "2025-05-21T10:57:32.311000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:32.312000"
    },
    {
      "id": 692,
      "name": "Abhedyam-Backend",
      "full_name": "MadhuKinnera/Abhedyam-Backend",
      "owner": "MadhuKinnera",
      "description": "Abhedyam: Empowering Rural Entrepreneurs with Backend REST APIs. Streamline business operations, customer relations, and financial transparency. Join us in the digital transformation of small-scale businesses for economic development and lasting impact",
      "url": "https://github.com/MadhuKinnera/Abhedyam-Backend",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [
        "100plusapis",
        "android-app",
        "bussinesss-app",
        "devinebiz",
        "java",
        "jwt-auth",
        "project-k",
        "rest-apis",
        "springboot"
      ],
      "created_at": "2025-05-21T10:57:34.577000",
      "updated_at": "2025-05-21T10:57:34.577000",
      "trend_date": "2025-05-21T10:57:34.577000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:34.578000"
    },
    {
      "id": 693,
      "name": "investments-aggregator",
      "full_name": "melvintivane/investments-aggregator",
      "owner": "melvintivane",
      "description": "The Investment Aggregator API is a backend application designed to manage users, investment accounts, and assets (stocks). The primary objective is to provide functionalities that allow users to register, update, and retrieve information related to their accounts and financial assets.",
      "url": "https://github.com/melvintivane/investments-aggregator",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [
        "junit",
        "mockito",
        "spring-boot",
        "sql"
      ],
      "created_at": "2025-05-21T10:57:36.837000",
      "updated_at": "2025-05-21T10:57:36.837000",
      "trend_date": "2025-05-21T10:57:36.837000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:36.838000"
    },
    {
      "id": 694,
      "name": "One-Card-Microservices-based-Payment-App",
      "full_name": "imSalik-Anwar/One-Card-Microservices-based-Payment-App",
      "owner": "imSalik-Anwar",
      "description": "\"This Spring Boot microservices project offers user registration, child management, account (card) administration, and transactions. It's secured with Spring Security, features an API gateway, and utilizes Eureka Server for service discovery. Streamline user management and financial transactions in a distributed and secure environment.\"",
      "url": "https://github.com/imSalik-Anwar/One-Card-Microservices-based-Payment-App",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:39.074000",
      "updated_at": "2025-05-21T10:57:39.074000",
      "trend_date": "2025-05-21T10:57:39.074000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:39.075000"
    },
    {
      "id": 695,
      "name": "Algorithmic-Stock-Tracking-Platform",
      "full_name": "FarhanR675/Algorithmic-Stock-Tracking-Platform",
      "owner": "FarhanR675",
      "description": "A back-end platform designed to track stock prices and provide key financial metrics. This project integrates with the Alpha Vantage API to fetch real-time global stock quotes, and utilizes Java, HttpServer, PostgreSQL, and JUnit to deliver a robust and efficient stock tracking solution.",
      "url": "https://github.com/FarhanR675/Algorithmic-Stock-Tracking-Platform",
      "language": "Java",
      "stars": 2,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:41.323000",
      "updated_at": "2025-05-21T10:57:41.323000",
      "trend_date": "2025-05-21T10:57:41.323000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:41.324000"
    },
    {
      "id": 696,
      "name": "calculators",
      "full_name": "amit169/calculators",
      "owner": "amit169",
      "description": "Provide a Calculator API to determine affordability and financial forecasting  ",
      "url": "https://github.com/amit169/calculators",
      "language": "Java",
      "stars": 1,
      "forks": 54,
      "tags": [],
      "created_at": "2025-05-21T10:57:43.602000",
      "updated_at": "2025-05-21T10:57:43.602000",
      "trend_date": "2025-05-21T10:57:43.602000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:43.603000"
    },
    {
      "id": 697,
      "name": "financial-api",
      "full_name": "mateusVedoy/financial-api",
      "owner": "mateusVedoy",
      "description": "API to be consumed for a frontend application",
      "url": "https://github.com/mateusVedoy/financial-api",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:45.869000",
      "updated_at": "2025-05-21T10:57:45.869000",
      "trend_date": "2025-05-21T10:57:45.869000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:45.869000"
    },
    {
      "id": 698,
      "name": "FinancialWeb",
      "full_name": "jack12347410/FinancialWeb",
      "owner": "jack12347410",
      "description": "串接永豐金融API/ spring boot / spring data jpa / thymeleaf / hibernate / okhttp3 / oauth2 / jwt / ",
      "url": "https://github.com/jack12347410/FinancialWeb",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:48.095000",
      "updated_at": "2025-05-21T10:57:48.095000",
      "trend_date": "2025-05-21T10:57:48.095000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:48.096000"
    },
    {
      "id": 699,
      "name": "financial-control-api",
      "full_name": "lucasgoetengithub/financial-control-api",
      "owner": "lucasgoetengithub",
      "description": "",
      "url": "https://github.com/lucasgoetengithub/financial-control-api",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:50.377000",
      "updated_at": "2025-05-21T10:57:50.377000",
      "trend_date": "2025-05-21T10:57:50.377000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:50.378000"
    },
    {
      "id": 700,
      "name": "financial-java-api-trainning",
      "full_name": "arthus05/financial-java-api-trainning",
      "owner": "arthus05",
      "description": "RESTful API in Spring Boot for study.",
      "url": "https://github.com/arthus05/financial-java-api-trainning",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:52.636000",
      "updated_at": "2025-05-21T10:57:52.636000",
      "trend_date": "2025-05-21T10:57:52.636000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:52.636000"
    },
    {
      "id": 701,
      "name": "Personal_Financial_Management",
      "full_name": "Nima-Khodabandelou/Personal_Financial_Management",
      "owner": "Nima-Khodabandelou",
      "description": "PFM project using Spring Boot, RDBMS, REST API, and Docker",
      "url": "https://github.com/Nima-Khodabandelou/Personal_Financial_Management",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:54.885000",
      "updated_at": "2025-05-21T10:57:54.885000",
      "trend_date": "2025-05-21T10:57:54.885000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:54.885000"
    },
    {
      "id": 702,
      "name": "account-manager-api",
      "full_name": "evertonmj/account-manager-api",
      "owner": "evertonmj",
      "description": "REST API to manage a financial account",
      "url": "https://github.com/evertonmj/account-manager-api",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [],
      "created_at": "2025-05-21T10:57:57.191000",
      "updated_at": "2025-05-21T10:57:57.191000",
      "trend_date": "2025-05-21T10:57:57.191000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:57.192000"
    },
    {
      "id": 703,
      "name": "finapp_api",
      "full_name": "mwndl/finapp_api",
      "owner": "mwndl",
      "description": "A financial goal tracker built with Spring Boot.",
      "url": "https://github.com/mwndl/finapp_api",
      "language": "Java",
      "stars": 1,
      "forks": 0,
      "tags": [
        "financial-management",
        "goal-based-savings",
        "investment-tracker",
        "java",
        "jwt",
        "mysql",
        "rest-api",
        "spring-boot",
        "spring-security"
      ],
      "created_at": "2025-05-21T10:57:59.456000",
      "updated_at": "2025-05-21T10:57:59.456000",
      "trend_date": "2025-05-21T10:57:59.456000",
      "keyword": "Financial API",
      "scraped_at": "2025-05-21T10:57:59.456000"
    }
  ]
}