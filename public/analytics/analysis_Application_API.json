{
  "keyword": "Application_API",
  "repository_count": 80,
  "analysis_date": "2025-05-29T17:14:07.136600",
  "charts": {
    "language_distribution": {
      "data": {
        "Python": 50,
        "Java": 30
      }
    },
    "stars_distribution": {
      "data": {
        "mean": 877.025,
        "min": 105,
        "max": 28643,
        "total": 70162
      }
    },
    "common_packages": {
      "data": {}
    },
    "imported_libraries": {
      "data": {
        "os": 26,
        "setuptools": 15,
        "json": 10,
        "sys": 9,
        "time": 9,
        "logging": 7,
        "utils": 7,
        "requests": 7,
        "yaml": 6,
        "flask": 6,
        "datetime": 5,
        "dotenv": 4,
        "openai": 4,
        "langchain": 4,
        "__future__": 4,
        "pydantic": 3,
        "pathlib": 3,
        "spotipy": 3,
        "model": 3,
        "base64": 3
      }
    },
    "common_functions": {
      "data": {}
    },
    "tag_analysis": {
      "data": {
        "java": 11,
        "python": 10,
        "api": 6,
        "security": 5,
        "chatgpt-api": 5,
        "docker": 4,
        "python3": 4,
        "ai": 4,
        "llm": 4,
        "framework": 3,
        "serverless": 3,
        "restful-api": 3,
        "flask": 3,
        "sqlalchemy": 3,
        "fastapi": 3
      }
    },
    "comment_keywords": {
      "data": {}
    },
    "description_keywords": {
      "data": {
        "application": 58,
        "tensorflow": 34,
        "training": 33,
        "applications": 31,
        "data": 31,
        "your": 26,
        "detection": 26,
        "object": 24,
        "models": 23,
        "using": 23,
        "https": 23,
        "model": 22,
        "images": 22,
        "hands": 22,
        "dataset": 20,
        "apis": 19,
        "python": 18,
        "android": 17,
        "detector": 16,
        "process": 14,
        "provides": 14,
        "repo": 14,
        "java": 14,
        "based": 12,
        "open": 12,
        "source": 12,
        "hand": 11,
        "image": 11,
        "custom": 11,
        "framework": 10,
        "research": 10,
        "used": 10,
        "neural": 10,
        "train": 10,
        "egohands": 10,
        "tutorial": 10,
        "width": 10,
        "objects": 10,
        "have": 10,
        "time": 9,
        "code": 9,
        "test": 9,
        "networks": 9,
        "which": 9,
        "video": 9,
        "detect": 9,
        "generate": 8,
        "files": 8,
        "real": 8,
        "contains": 8
      }
    }
  },
  "repositories": [
    {
      "id": 101,
      "name": "textual",
      "owner": "Textualize",
      "full_name": "Textualize/textual",
      "description": "The lean application framework for Python.  Build sophisticated user interfaces with a simple Python API. Run your apps in the terminal and a web browser.",
      "language": "Python",
      "stars": 28643,
      "forks": 885,
      "url": "https://github.com/Textualize/textual",
      "tags": [
        "cli",
        "framework",
        "python",
        "rich",
        "terminal",
        "tui"
      ]
    },
    {
      "id": 151,
      "name": "lwjgl3",
      "owner": "LWJGL",
      "full_name": "LWJGL/lwjgl3",
      "description": "LWJGL is a Java library that enables cross-platform access to popular native APIs useful in the development of graphics (OpenGL, Vulkan, bgfx), audio (OpenAL, Opus), parallel computing (OpenCL, CUDA) and XR (OpenVR, LibOVR, OpenXR) applications.",
      "language": "Java",
      "stars": 5014,
      "forks": 657,
      "url": "https://github.com/LWJGL/lwjgl3",
      "tags": [
        "bindings",
        "fmod",
        "freetype",
        "glfw",
        "harfbuzz",
        "java",
        "kotlin",
        "lwjgl",
        "openal",
        "opencl",
        "opengl",
        "opengl-es",
        "openxr",
        "vr",
        "vulkan"
      ]
    },
    {
      "id": 152,
      "name": "chatgpt-java",
      "owner": "PlexPt",
      "full_name": "PlexPt/chatgpt-java",
      "description": "ChatGPT Java SDK。支持 GPT-4o、 GPT4 API。开箱即用。An unofficial Java SDK for seamless integration with ChatGPT's GPT-3.5 and GPT-4 APIs. Ready-to-use, simple setup, and efficient for building AI-powered applications.",
      "language": "Java",
      "stars": 3642,
      "forks": 716,
      "url": "https://github.com/PlexPt/chatgpt-java",
      "tags": [
        "chatgpt",
        "chatgpt-api",
        "chatgpt-api-wrapper",
        "chatgpt-bot",
        "chatgpt-sdk",
        "chatgpt3",
        "chatgpt4",
        "gpt4",
        "java"
      ]
    },
    {
      "id": 153,
      "name": "openmrs-core",
      "owner": "openmrs",
      "full_name": "openmrs/openmrs-core",
      "description": "OpenMRS API and web application code",
      "language": "Java",
      "stars": 1532,
      "forks": 3821,
      "url": "https://github.com/openmrs/openmrs-core",
      "tags": [
        "ehr",
        "emr",
        "health",
        "healthcare",
        "hospital",
        "java",
        "medical-records",
        "openmrs",
        "openmrs-community"
      ]
    },
    {
      "id": 154,
      "name": "live-transcribe-speech-engine",
      "owner": "google",
      "full_name": "google/live-transcribe-speech-engine",
      "description": "Live Transcribe is an Android application that provides real-time captioning for people who are deaf or hard of hearing. This repository contains the Android client libraries for communicating with Google's Cloud Speech API that are used in Live Transcribe.",
      "language": "Java",
      "stars": 1459,
      "forks": 218,
      "url": "https://github.com/google/live-transcribe-speech-engine",
      "tags": []
    },
    {
      "id": 103,
      "name": "deepseek-engineer",
      "owner": "Doriandarko",
      "full_name": "Doriandarko/deepseek-engineer",
      "description": "A powerful coding assistant application that integrates with the DeepSeek API to process user conversations and generate structured JSON responses. Through an intuitive command-line interface, it can read local file contents, create new files, and apply diff edits to existing files in real time.",
      "language": "Python",
      "stars": 1451,
      "forks": 254,
      "url": "https://github.com/Doriandarko/deepseek-engineer",
      "tags": []
    },
    {
      "id": 104,
      "name": "RestGPT",
      "owner": "Yifan-Song793",
      "full_name": "Yifan-Song793/RestGPT",
      "description": "An LLM-based autonomous agent controlling real-world applications via RESTful APIs",
      "language": "Python",
      "stars": 1366,
      "forks": 104,
      "url": "https://github.com/Yifan-Song793/RestGPT",
      "tags": []
    },
    {
      "id": 155,
      "name": "mssql-jdbc",
      "owner": "microsoft",
      "full_name": "microsoft/mssql-jdbc",
      "description": "The Microsoft JDBC Driver for SQL Server is a Type 4 JDBC driver that provides database connectivity with SQL Server through the standard JDBC application program interfaces (APIs).",
      "language": "Java",
      "stars": 1079,
      "forks": 438,
      "url": "https://github.com/microsoft/mssql-jdbc",
      "tags": []
    },
    {
      "id": 156,
      "name": "spring-boot-master-class",
      "owner": "in28minutes",
      "full_name": "in28minutes/spring-boot-master-class",
      "description": "Understand and love the power of Spring Boot - All its features are illustrated developing a web application managing todos and a basic API for survey questionnaire. Also covers unit testing, mocking and integration testing.",
      "language": "Java",
      "stars": 1071,
      "forks": 931,
      "url": "https://github.com/in28minutes/spring-boot-master-class",
      "tags": []
    },
    {
      "id": 157,
      "name": "sitewhere",
      "owner": "sitewhere",
      "full_name": "sitewhere/sitewhere",
      "description": "SiteWhere is an industrial strength open-source application enablement platform for the Internet of Things (IoT). It provides a multi-tenant microservice-based infrastructure that includes device/asset management, data ingestion, big-data storage, and integration through a modern, scalable architecture.  SiteWhere provides REST APIs for all system functionality.  SiteWhere provides SDKs for many common device platforms including Android, iOS, Arduino, and any Java-capable platform such as Raspberry Pi rapidly accelerating the speed of innovation.",
      "language": "Java",
      "stars": 1022,
      "forks": 381,
      "url": "https://github.com/sitewhere/sitewhere",
      "tags": [
        "android",
        "arduino",
        "aws",
        "device-management",
        "helm",
        "integration",
        "internet-of-things",
        "iot",
        "iot-framework",
        "iot-platform",
        "java",
        "kafka",
        "kubernetes",
        "microservices",
        "mqtt",
        "open-source",
        "platform",
        "raspberry-pi",
        "sitewhere",
        "zookeeper"
      ]
    },
    {
      "id": 106,
      "name": "Verbi",
      "owner": "PromtEngineer",
      "full_name": "PromtEngineer/Verbi",
      "description": "A modular voice assistant application for experimenting with state-of-the-art transcription, response generation, and text-to-speech models. Supports OpenAI, Groq, Elevanlabs, CartesiaAI, and Deepgram APIs, plus local models via Ollama. Ideal for research and development in voice technology.",
      "language": "Python",
      "stars": 981,
      "forks": 184,
      "url": "https://github.com/PromtEngineer/Verbi",
      "tags": []
    },
    {
      "id": 107,
      "name": "grafana-backup-tool",
      "owner": "ysde",
      "full_name": "ysde/grafana-backup-tool",
      "description": "A Python-based application to backup Grafana settings by using the Grafana API",
      "language": "Python",
      "stars": 908,
      "forks": 282,
      "url": "https://github.com/ysde/grafana-backup-tool",
      "tags": [
        "backup",
        "docker",
        "gcs",
        "grafana",
        "s3"
      ]
    },
    {
      "id": 158,
      "name": "android-obd-reader",
      "owner": "pires",
      "full_name": "pires/android-obd-reader",
      "description": "Android OBD-II Reader application that uses pure OBD-II PID's Java API.",
      "language": "Java",
      "stars": 823,
      "forks": 471,
      "url": "https://github.com/pires/android-obd-reader",
      "tags": [
        "android",
        "car",
        "java",
        "onboard-diagnostics"
      ]
    },
    {
      "id": 108,
      "name": "fastapi-versioning",
      "owner": "DeanWay",
      "full_name": "DeanWay/fastapi-versioning",
      "description": "api versioning for fastapi web applications",
      "language": "Python",
      "stars": 711,
      "forks": 65,
      "url": "https://github.com/DeanWay/fastapi-versioning",
      "tags": []
    },
    {
      "id": 159,
      "name": "geometry-api-java",
      "owner": "Esri",
      "full_name": "Esri/geometry-api-java",
      "description": "The Esri Geometry API for Java enables developers to write custom applications for analysis of spatial data.  This API is used in the Esri GIS Tools for Hadoop and other 3rd-party data processing solutions.",
      "language": "Java",
      "stars": 699,
      "forks": 262,
      "url": "https://github.com/Esri/geometry-api-java",
      "tags": [
        "data-management",
        "geometry-api-java",
        "java"
      ]
    },
    {
      "id": 160,
      "name": "waf",
      "owner": "chengdedeng",
      "full_name": "chengdedeng/waf",
      "description": ":vertical_traffic_light:Web Application Firewall or API Gateway(应用防火墙/API网关)",
      "language": "Java",
      "stars": 697,
      "forks": 210,
      "url": "https://github.com/chengdedeng/waf",
      "tags": [
        "firewall",
        "http-proxy",
        "littleproxy",
        "security",
        "waf"
      ]
    },
    {
      "id": 161,
      "name": "spring-roo",
      "owner": "spring-attic",
      "full_name": "spring-attic/spring-roo",
      "description": "Spring Roo is a next-generation rapid application development tool for Java developers. It focuses on higher productivity, stock-standard Java APIs, high usability, avoiding engineering trade-offs and facilitating easy Roo removal.",
      "language": "Java",
      "stars": 694,
      "forks": 320,
      "url": "https://github.com/spring-attic/spring-roo",
      "tags": []
    },
    {
      "id": 162,
      "name": "esapi-java-legacy",
      "owner": "ESAPI",
      "full_name": "ESAPI/esapi-java-legacy",
      "description": "ESAPI (The OWASP Enterprise Security API) is a free, open source, web application security control library that makes it easier for programmers to write lower-risk applications.",
      "language": "Java",
      "stars": 630,
      "forks": 367,
      "url": "https://github.com/ESAPI/esapi-java-legacy",
      "tags": [
        "java",
        "security"
      ]
    },
    {
      "id": 110,
      "name": "pypyr",
      "owner": "pypyr",
      "full_name": "pypyr/pypyr",
      "description": "pypyr task-runner cli & api for automation pipelines. Automate anything by combining commands, different scripts in different languages & applications into one pipeline process.",
      "language": "Python",
      "stars": 627,
      "forks": 27,
      "url": "https://github.com/pypyr/pypyr",
      "tags": [
        "automation",
        "cd",
        "ci",
        "ci-cd",
        "continuous-deployment",
        "continuous-integration",
        "devops",
        "pipeline",
        "pipeline-processor",
        "pipeline-runner",
        "pipelines",
        "pipelines-yaml",
        "python",
        "script",
        "script-loader",
        "task-manager",
        "task-runner",
        "taskrunner",
        "tool"
      ]
    },
    {
      "id": 111,
      "name": "Speech-Translate",
      "owner": "Dadangdut33",
      "full_name": "Dadangdut33/Speech-Translate",
      "description": "A realtime speech transcription and translation application using Whisper OpenAI and free translation API. Interface made using Tkinter. Code written fully in Python.",
      "language": "Python",
      "stars": 578,
      "forks": 70,
      "url": "https://github.com/Dadangdut33/Speech-Translate",
      "tags": [
        "python",
        "speech-transcription",
        "speech-translation",
        "tkinter-python",
        "translate",
        "whisper"
      ]
    },
    {
      "id": 112,
      "name": "Tiredful-API",
      "owner": "payatu",
      "full_name": "payatu/Tiredful-API",
      "description": "An intentionally designed broken web application based on REST API.",
      "language": "Python",
      "stars": 575,
      "forks": 131,
      "url": "https://github.com/payatu/Tiredful-API",
      "tags": []
    },
    {
      "id": 163,
      "name": "springboot-jwt",
      "owner": "nydiarra",
      "full_name": "nydiarra/springboot-jwt",
      "description": "Example Springboot Application for Securing a REST API with  JSON Web Token (JWT). For an example Integration with Angular (version 2+) go to https://github.com/ipassynk/angular-springboot-jwt",
      "language": "Java",
      "stars": 547,
      "forks": 333,
      "url": "https://github.com/nydiarra/springboot-jwt",
      "tags": []
    },
    {
      "id": 114,
      "name": "jupyter_server",
      "owner": "jupyter-server",
      "full_name": "jupyter-server/jupyter_server",
      "description": "The backend—i.e. core services, APIs, and REST endpoints—to Jupyter web applications.",
      "language": "Python",
      "stars": 523,
      "forks": 336,
      "url": "https://github.com/jupyter-server/jupyter_server",
      "tags": [
        "jupyter",
        "server"
      ]
    },
    {
      "id": 115,
      "name": "honeyLambda",
      "owner": "0x4D31",
      "full_name": "0x4D31/honeyLambda",
      "description": "honeyλ - a simple, serverless application designed to create and monitor fake HTTP endpoints (i.e. URL honeytokens) automatically, on top of AWS Lambda and Amazon API Gateway",
      "language": "Python",
      "stars": 517,
      "forks": 55,
      "url": "https://github.com/0x4D31/honeyLambda",
      "tags": [
        "aws",
        "deception",
        "honeypot",
        "honeytoken",
        "lambda",
        "python",
        "security",
        "serverless"
      ]
    },
    {
      "id": 116,
      "name": "EFIgy",
      "owner": "duo-labs",
      "full_name": "duo-labs/EFIgy",
      "description": "A small client application that uses the Duo Labs EFIgy API to inform you about the state of your Mac EFI firmware",
      "language": "Python",
      "stars": 511,
      "forks": 39,
      "url": "https://github.com/duo-labs/EFIgy",
      "tags": [
        "efi",
        "firmware",
        "macos",
        "security"
      ]
    },
    {
      "id": 164,
      "name": "swim",
      "owner": "swimos",
      "full_name": "swimos/swim",
      "description": "Full stack application platform for building stateful microservices, streaming APIs, and real-time UIs",
      "language": "Java",
      "stars": 492,
      "forks": 41,
      "url": "https://github.com/swimos/swim",
      "tags": [
        "actor-model",
        "asynchronous-programming",
        "decentralized-applications",
        "distributed-systems",
        "microservices-architecture",
        "non-blocking-io",
        "real-time",
        "serverless",
        "serverless-framework",
        "stateful",
        "streaming-api",
        "streaming-data",
        "web-agent",
        "websockets"
      ]
    },
    {
      "id": 165,
      "name": "ai-dial-core",
      "owner": "epam",
      "full_name": "epam/ai-dial-core",
      "description": "The main component of AI DIAL, which provides unified API to different chat completion and embedding models, assistants, and applications",
      "language": "Java",
      "stars": 482,
      "forks": 27,
      "url": "https://github.com/epam/ai-dial-core",
      "tags": [
        "ai-dial",
        "llm"
      ]
    },
    {
      "id": 166,
      "name": "Android-Material-Themes-Demo",
      "owner": "StevenByle",
      "full_name": "StevenByle/Android-Material-Themes-Demo",
      "description": "A demo Android application and explanation of creating dynamically colorized Material Design applications supporting Android 4.0 (API 15) and up",
      "language": "Java",
      "stars": 479,
      "forks": 82,
      "url": "https://github.com/StevenByle/Android-Material-Themes-Demo",
      "tags": []
    },
    {
      "id": 167,
      "name": "opentest",
      "owner": "mcdcorp",
      "full_name": "mcdcorp/opentest",
      "description": "Open source test automation tool for web applications, mobile apps and APIs ",
      "language": "Java",
      "stars": 471,
      "forks": 114,
      "url": "https://github.com/mcdcorp/opentest",
      "tags": [
        "api",
        "framework",
        "mobile",
        "test",
        "web"
      ]
    },
    {
      "id": 169,
      "name": "shimmer",
      "owner": "openmhealth",
      "full_name": "openmhealth/shimmer",
      "description": "An application for reading health data from third-party APIs.",
      "language": "Java",
      "stars": 449,
      "forks": 124,
      "url": "https://github.com/openmhealth/shimmer",
      "tags": []
    },
    {
      "id": 117,
      "name": "APIFuzzer",
      "owner": "KissPeter",
      "full_name": "KissPeter/APIFuzzer",
      "description": "Fuzz test your application using your OpenAPI or Swagger API definition without coding",
      "language": "Python",
      "stars": 445,
      "forks": 69,
      "url": "https://github.com/KissPeter/APIFuzzer",
      "tags": [
        "api-blueprint",
        "fuzz",
        "fuzzer",
        "openapi",
        "python3",
        "swagger"
      ]
    },
    {
      "id": 119,
      "name": "porch-pirate",
      "owner": "MandConsultingGroup",
      "full_name": "MandConsultingGroup/porch-pirate",
      "description": "Porch Pirate is the most comprehensive Postman recon / OSINT client and framework that facilitates the automated discovery and exploitation of API endpoints and secrets committed to workspaces, collections, requests, users and teams. Porch Pirate can be used as a client or be incorporated into your own applications.",
      "language": "Python",
      "stars": 416,
      "forks": 44,
      "url": "https://github.com/MandConsultingGroup/porch-pirate",
      "tags": [
        "devsecops",
        "osint",
        "postman",
        "recon",
        "scanning",
        "secrets",
        "security"
      ]
    },
    {
      "id": 120,
      "name": "hooker",
      "owner": "AndroidHooker",
      "full_name": "AndroidHooker/hooker",
      "description": "Hooker is an opensource project for dynamic analyses of Android applications. This project provides various tools and applications that can be use to automaticaly intercept and modify any API calls made by a targeted application.",
      "language": "Python",
      "stars": 409,
      "forks": 109,
      "url": "https://github.com/AndroidHooker/hooker",
      "tags": []
    },
    {
      "id": 122,
      "name": "simplegmail",
      "owner": "jeremyephron",
      "full_name": "jeremyephron/simplegmail",
      "description": "A simple Gmail API client for applications in Python",
      "language": "Python",
      "stars": 381,
      "forks": 78,
      "url": "https://github.com/jeremyephron/simplegmail",
      "tags": [
        "api",
        "email",
        "gmail",
        "gmail-api",
        "pypi-package",
        "python",
        "python3"
      ]
    },
    {
      "id": 171,
      "name": "Stark",
      "owner": "ximsfei",
      "full_name": "ximsfei/Stark",
      "description": "Stark is a hot-fix framework for Android. It supports swapping new implementations of classes without restarting a running Android application, and updated Android resources (icons, layout, etc) while only restarting the Android Activity. Most importantly, there is no private API invoked in Stark.",
      "language": "Java",
      "stars": 364,
      "forks": 49,
      "url": "https://github.com/ximsfei/Stark",
      "tags": [
        "android",
        "gradle",
        "hot-fix",
        "patch"
      ]
    },
    {
      "id": 172,
      "name": "CastVideos-android",
      "owner": "googlecast",
      "full_name": "googlecast/CastVideos-android",
      "description": "Reference Android Sender w/ Framework API: CastVideos-android application shows how to cast videos from an Android device that is fully compliant with the Cast Design Checklist.",
      "language": "Java",
      "stars": 349,
      "forks": 188,
      "url": "https://github.com/googlecast/CastVideos-android",
      "tags": []
    },
    {
      "id": 123,
      "name": "usaspending-api",
      "owner": "fedspendingtransparency",
      "full_name": "fedspendingtransparency/usaspending-api",
      "description": "Server application to serve U.S. federal spending data via a RESTful API",
      "language": "Python",
      "stars": 343,
      "forks": 127,
      "url": "https://github.com/fedspendingtransparency/usaspending-api",
      "tags": [
        "api",
        "api-blueprint",
        "black",
        "database",
        "database-setup",
        "django",
        "django-rest-framework",
        "docker",
        "dredd",
        "elasticsearch",
        "etl",
        "federal-spending-data",
        "local-database",
        "markdown",
        "postgres-database",
        "postgresql",
        "pytest",
        "python3",
        "restful-api"
      ]
    },
    {
      "id": 124,
      "name": "Virtual-Try-On-Application-using-Flask-Twilio-and-Gradio",
      "owner": "adarshb3",
      "full_name": "adarshb3/Virtual-Try-On-Application-using-Flask-Twilio-and-Gradio",
      "description": "This repository contains the code for a virtual try-on application built using Flask, Twilio's WhatsApp API, and Gradio's virtual try-on model. Users can send images via WhatsApp to try on garments virtually, and the results are sent back to them.",
      "language": "Python",
      "stars": 342,
      "forks": 38,
      "url": "https://github.com/adarshb3/Virtual-Try-On-Application-using-Flask-Twilio-and-Gradio",
      "tags": []
    },
    {
      "id": 173,
      "name": "layrry",
      "owner": "moditect",
      "full_name": "moditect/layrry",
      "description": "A Runner and API for Layered Java Applications",
      "language": "Java",
      "stars": 342,
      "forks": 33,
      "url": "https://github.com/moditect/layrry",
      "tags": []
    },
    {
      "id": 174,
      "name": "db2rest",
      "owner": "9tigerio",
      "full_name": "9tigerio/db2rest",
      "description": "Instant no code DATA API platform. Connect any database, run anywhere. Power your GENAI application function/tools calls in seconds.",
      "language": "Java",
      "stars": 336,
      "forks": 53,
      "url": "https://github.com/9tigerio/db2rest",
      "tags": [
        "ai",
        "data-api",
        "generative-ai",
        "java",
        "llm",
        "low-code",
        "lowcode",
        "mariadb",
        "mysql",
        "mysql-database",
        "no-code",
        "nocode",
        "oracle",
        "postgres",
        "postgresql",
        "restapi",
        "spring-boot",
        "springboot"
      ]
    },
    {
      "id": 126,
      "name": "lithops",
      "owner": "lithops-cloud",
      "full_name": "lithops-cloud/lithops",
      "description": "A multi-cloud framework for big data analytics and embarrassingly parallel jobs, that provides an universal API for building parallel applications in the cloud ☁️🚀",
      "language": "Python",
      "stars": 331,
      "forks": 113,
      "url": "https://github.com/lithops-cloud/lithops",
      "tags": [
        "big-data",
        "big-data-analytics",
        "cloud-computing",
        "data-processing",
        "distributed",
        "kubernetes",
        "multicloud",
        "multiprocessing",
        "object-storage",
        "parallel",
        "python",
        "serverless",
        "serverless-computing",
        "serverless-functions"
      ]
    },
    {
      "id": 175,
      "name": "castlemock",
      "owner": "castlemock",
      "full_name": "castlemock/castlemock",
      "description": "Castle Mock is a web application that provides the functionality to mock out RESTful APIs and SOAP web services. ",
      "language": "Java",
      "stars": 329,
      "forks": 105,
      "url": "https://github.com/castlemock/castlemock",
      "tags": [
        "cross-platform",
        "docker",
        "java",
        "mocking",
        "rest-api",
        "restful-api",
        "soap",
        "tomcat",
        "web-service"
      ]
    },
    {
      "id": 127,
      "name": "Building-Data-Science-Applications-with-FastAPI",
      "owner": "PacktPublishing",
      "full_name": "PacktPublishing/Building-Data-Science-Applications-with-FastAPI",
      "description": "Building Data Science Applications with FastAPI, Published by Packt",
      "language": "Python",
      "stars": 328,
      "forks": 159,
      "url": "https://github.com/PacktPublishing/Building-Data-Science-Applications-with-FastAPI",
      "tags": []
    },
    {
      "id": 177,
      "name": "GMapsFX",
      "owner": "dlsc-software-consulting-gmbh",
      "full_name": "dlsc-software-consulting-gmbh/GMapsFX",
      "description": "Java API for using Google Maps within a JavaFX application.",
      "language": "Java",
      "stars": 324,
      "forks": 120,
      "url": "https://github.com/dlsc-software-consulting-gmbh/GMapsFX",
      "tags": [
        "google-maps",
        "java",
        "javafx",
        "javafx-application",
        "javafx-library",
        "javafx-project",
        "map",
        "mapping",
        "maps"
      ]
    },
    {
      "id": 178,
      "name": "Materialize",
      "owner": "mikepenz",
      "full_name": "mikepenz/Materialize",
      "description": "A easy helper library for Android to manage your applications StatusBarShadow, FullScreen behavior and much more over API Levels down to 10",
      "language": "Java",
      "stars": 294,
      "forks": 51,
      "url": "https://github.com/mikepenz/Materialize",
      "tags": []
    },
    {
      "id": 128,
      "name": "LLMFuzzer",
      "owner": "mnns",
      "full_name": "mnns/LLMFuzzer",
      "description": "🧠 LLMFuzzer - Fuzzing Framework for Large Language Models 🧠 LLMFuzzer is the first open-source fuzzing framework specifically designed for Large Language Models (LLMs), especially for their integrations in applications via LLM APIs. 🚀💥",
      "language": "Python",
      "stars": 277,
      "forks": 43,
      "url": "https://github.com/mnns/LLMFuzzer",
      "tags": [
        "ai",
        "cybersecurity",
        "llm",
        "llmsecurity"
      ]
    },
    {
      "id": 129,
      "name": "hand_detection",
      "owner": "molyswu",
      "full_name": "molyswu/hand_detection",
      "description": "using Neural Networks (SSD) on Tensorflow.  This repo documents steps and scripts used to train a hand detector using Tensorflow (Object Detection API). As with any DNN based task, the most expensive (and riskiest) part of the process has to do with finding or creating the right (annotated) dataset. I was interested mainly in detecting hands on a table (egocentric view point). I experimented first with the [Oxford Hands Dataset](http://www.robots.ox.ac.uk/~vgg/data/hands/) (the results were not good). I then tried the [Egohands Dataset](http://vision.soic.indiana.edu/projects/egohands/) which was a much better fit to my requirements.  The goal of this repo/post is to demonstrate how neural networks can be applied to the (hard) problem of tracking hands (egocentric and other views). Better still, provide code that can be adapted to other uses cases.  If you use this tutorial or models in your research or project, please cite [this](#citing-this-tutorial).  Here is the detector in action.  <img src=\"images/hand1.gif\" width=\"33.3%\"><img src=\"images/hand2.gif\" width=\"33.3%\"><img src=\"images/hand3.gif\" width=\"33.3%\"> Realtime detection on video stream from a webcam .  <img src=\"images/chess1.gif\" width=\"33.3%\"><img src=\"images/chess2.gif\" width=\"33.3%\"><img src=\"images/chess3.gif\" width=\"33.3%\"> Detection on a Youtube video.  Both examples above were run on a macbook pro **CPU** (i7, 2.5GHz, 16GB). Some fps numbers are:   | FPS  | Image Size | Device| Comments| | ------------- | ------------- | ------------- | ------------- | | 21  | 320 * 240  | Macbook pro (i7, 2.5GHz, 16GB) | Run without visualizing results| | 16  | 320 * 240  | Macbook pro (i7, 2.5GHz, 16GB) | Run while visualizing results (image above) | | 11  | 640 * 480  | Macbook pro (i7, 2.5GHz, 16GB) | Run while visualizing results (image above) |  > Note: The code in this repo is written and tested with Tensorflow `1.4.0-rc0`. Using a different version may result in [some errors](https://github.com/tensorflow/models/issues/1581). You may need to [generate your own frozen model](https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/) graph using the [model checkpoints](model-checkpoint) in the repo to fit your TF version.    **Content of this document** - Motivation - Why Track/Detect hands with Neural Networks - Data preparation and network training in Tensorflow (Dataset, Import, Training) - Training the hand detection Model - Using the Detector to Detect/Track hands - Thoughts on Optimizations.  > P.S if you are using or have used the models provided here, feel free to reach out on twitter ([@vykthur](https://twitter.com/vykthur)) and share your work!  ## Motivation - Why Track/Detect hands with Neural Networks?  There are several existing approaches to tracking hands in the computer vision domain. Incidentally, many of these approaches are rule based (e.g extracting background based on texture and boundary features, distinguishing between hands and background using color histograms and HOG classifiers,) making them not very robust. For example, these algorithms might get confused if the background is unusual or in situations where sharp changes in lighting conditions cause sharp changes in skin color or the tracked object becomes occluded.(see [here for a review](https://www.cse.unr.edu/~bebis/handposerev.pdf) paper on hand pose estimation from the HCI perspective)  With sufficiently large datasets, neural networks provide opportunity to train models that perform well and address challenges of existing object tracking/detection algorithms - varied/poor lighting, noisy environments, diverse viewpoints and even occlusion. The main drawbacks to usage for real-time tracking/detection is that they can be complex, are relatively slow compared to tracking-only algorithms and it can be quite expensive to assemble a good dataset. But things are changing with advances in fast neural networks.  Furthermore, this entire area of work has been made more approachable by deep learning frameworks (such as the tensorflow object detection api) that simplify the process of training a model for custom object detection. More importantly, the advent of fast neural network models like ssd, faster r-cnn, rfcn (see [here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models) ) etc make neural networks an attractive candidate for real-time detection (and tracking) applications. Hopefully, this repo demonstrates this.  > If you are not interested in the process of training the detector, you can skip straight to applying the [pretrained model I provide in detecting hands](#detecting-hands).  Training a model is a multi-stage process (assembling dataset, cleaning, splitting into training/test partitions and generating an inference graph). While I lightly touch on the details of these parts, there are a few other tutorials cover training a custom object detector using the tensorflow object detection api in more detail[ see [here](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) and [here](https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9) ]. I recommend you walk through those if interested in training a custom object detector from scratch.  ## Data preparation and network training in Tensorflow (Dataset, Import, Training)  **The Egohands Dataset**  The hand detector model is built using data from the [Egohands Dataset](http://vision.soic.indiana.edu/projects/egohands/) dataset. This dataset works well for several reasons. It contains high quality, pixel level annotations (>15000 ground truth labels) where hands are located across 4800 images. All images are captured from an egocentric view (Google glass) across 48 different environments (indoor, outdoor) and activities (playing cards, chess, jenga, solving puzzles etc).  <img src=\"images/egohandstrain.jpg\" width=\"100%\">  If you will be using the Egohands dataset, you can cite them as follows:  > Bambach, Sven, et al. \"Lending a hand: Detecting hands and recognizing activities in complex egocentric interactions.\" Proceedings of the IEEE International Conference on Computer Vision. 2015.  The Egohands dataset (zip file with labelled data) contains 48 folders of locations where video data was collected (100 images per folder). ``` -- LOCATION_X   -- frame_1.jpg   -- frame_2.jpg   ...   -- frame_100.jpg   -- polygons.mat  // contains annotations for all 100 images in current folder -- LOCATION_Y   -- frame_1.jpg   -- frame_2.jpg   ...   -- frame_100.jpg   -- polygons.mat  // contains annotations for all 100 images in current folder   ```  **Converting data to Tensorflow Format**  Some initial work needs to be done to the Egohands dataset to transform it into the format (`tfrecord`) which Tensorflow needs to train a model. This repo contains `egohands_dataset_clean.py` a script that will help you generate these csv files.  - Downloads the egohands datasets - Renames all files to include their directory names to ensure each filename is unique - Splits the dataset into train (80%), test (10%) and eval (10%) folders. - Reads in `polygons.mat` for each folder, generates bounding boxes and visualizes them to ensure correctness (see image above). - Once the script is done running, you should have an images folder containing three folders - train, test and eval. Each of these folders should also contain a csv label document each - `train_labels.csv`, `test_labels.csv`  that can be used to generate `tfrecords`  Note: While the egohands dataset provides four separate labels for hands (own left, own right, other left, and other right), for my purpose, I am only interested in the general `hand` class and label all training data as `hand`. You can modify the data prep script to generate `tfrecords` that support 4 labels.  Next: convert your dataset + csv files to tfrecords. A helpful guide on this can be found [here](https://pythonprogramming.net/creating-tfrecord-files-tensorflow-object-detection-api-tutorial/).For each folder, you should be able to generate  `train.record`, `test.record` required in the training process.   ## Training the hand detection Model  Now that the dataset has been assembled (and your tfrecords), the next task is to train a model based on this. With neural networks, it is possible to use a process called [transfer learning](https://www.tensorflow.org/tutorials/image_retraining) to shorten the amount of time needed to train the entire model. This means we can take an existing model (that has been trained well on a related domain (here image classification) and retrain its final layer(s) to detect hands for us. Sweet!. Given that neural networks sometimes have thousands or millions of parameters that can take weeks or months to train, transfer learning helps shorten training time to possibly hours. Tensorflow does offer a few models (in the tensorflow [model zoo](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models)) and I chose to use the `ssd_mobilenet_v1_coco` model as my start point given it is currently (one of) the fastest models (read the SSD research [paper here](https://arxiv.org/pdf/1512.02325.pdf)). The training process can be done locally on your CPU machine which may take a while or better on a (cloud) GPU machine (which is what I did). For reference, training on my macbook pro (tensorflow compiled from source to take advantage of the mac's cpu architecture) the maximum speed I got was 5 seconds per step as opposed to the ~0.5 seconds per step I got with a GPU. For reference it would take about 12 days to run 200k steps on my mac (i7, 2.5GHz, 16GB) compared to ~5hrs on a GPU.  > **Training on your own images**: Please use the [guide provided by Harrison from pythonprogramming](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) on how to generate tfrecords given your label csv files and your images. The guide also covers how to start the training process if training locally. [see [here] (https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/)]. If training in the cloud using a service like GCP, see the [guide here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_on_cloud.md).  As the training process progresses, the expectation is that total loss (errors) gets reduced to its possible minimum (about a value of 1 or thereabout). By observing the tensorboard graphs for total loss(see image below), it should be possible to get an idea of when the training process is complete (total loss does not decrease with further iterations/steps). I ran my training job for 200k steps (took about 5 hours) and stopped at a total Loss (errors) value of 2.575.(In retrospect, I could have stopped the training at about 50k steps and gotten a similar total loss value). With tensorflow, you can also run an evaluation concurrently that assesses your model to see how well it performs on the test data. A commonly used metric for performance is mean average precision (mAP) which is single number used to summarize the area under the precision-recall curve.  mAP is a measure of how well the model generates a bounding box that has at least a 50% overlap with the ground truth bounding box in our test dataset. For the hand detector trained here, the mAP value was **0.9686@0.5IOU**. mAP values range from 0-1, the higher the better.     <img src=\"images/accuracy.jpg\" width=\"100%\">  Once training is completed, the trained inference graph (`frozen_inference_graph.pb`) is then exported (see the earlier referenced guides for how to do this) and saved in the `hand_inference_graph` folder. Now its time to do some interesting detection.  ## Using the Detector to Detect/Track hands   If you have not done this yet, please following the guide on installing [Tensorflow and the Tensorflow object detection api](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md). This will walk you through setting up the tensorflow framework, cloning the tensorflow github repo and a guide on    - Load the `frozen_inference_graph.pb` trained on the hands dataset as well as the corresponding label map. In this repo, this is done in the `utils/detector_utils.py` script by the `load_inference_graph` method.   ```python   detection_graph = tf.Graph()     with detection_graph.as_default():         od_graph_def = tf.GraphDef()         with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:             serialized_graph = fid.read()             od_graph_def.ParseFromString(serialized_graph)             tf.import_graph_def(od_graph_def, name='')         sess = tf.Session(graph=detection_graph)     print(\">  ====== Hand Inference graph loaded.\")   ``` - Detect hands. In this repo, this is done in the `utils/detector_utils.py` script by the `detect_objects` method.   ```python   (boxes, scores, classes, num) = sess.run(         [detection_boxes, detection_scores,             detection_classes, num_detections],         feed_dict={image_tensor: image_np_expanded})   ``` - Visualize detected bounding detection_boxes. In this repo, this is done in the `utils/detector_utils.py` script by the `draw_box_on_image` method.   This repo contains two scripts that tie all these steps together.  - detect_multi_threaded.py : A threaded implementation for reading camera video input detection and detecting. Takes a set of command line flags to set parameters such as `--display` (visualize detections), image parameters `--width` and `--height`, videe `--source` (0 for camera) etc. - detect_single_threaded.py : Same as above, but single threaded. This script works for video files by setting the video source parameter videe `--source` (path to a video file).   ```cmd   # load and run detection on video at path \"videos/chess.mov\"   python detect_single_threaded.py --source videos/chess.mov ```  > Update: If you do have errors loading the frozen inference graph in this repo, feel free to generate a new graph that fits your TF version from the model-checkpoint in this repo. Use the [export_inference_graph.py](https://github.com/tensorflow/models/blob/master/research/object_detection/export_inference_graph.py) script provided in the tensorflow object detection api repo. More guidance on this [here](https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/).  ## Thoughts on Optimization. A few things that led to noticeable performance increases.  - Threading: Turns out that reading images from a webcam is a heavy I/O event and if run on the main application thread can slow down the program. I implemented some good ideas from [Adrian Rosebuck](https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/) on parrallelizing image capture across multiple worker threads. This mostly led to an FPS increase of about 5 points. - For those new to Opencv, images from the `cv2.read()` method return images in [BGR format](https://www.learnopencv.com/why-does-opencv-use-bgr-color-format/). Ensure you convert to RGB before detection (accuracy will be much reduced if you dont). ```python cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB) ``` - Keeping your input image small will increase fps without any significant accuracy drop.(I used about 320 x 240 compared to the 1280 x 720 which my webcam provides).  - Model Quantization. Moving from the current 32 bit to 8 bit can achieve up to 4x reduction in memory required to load and store models. One way to further speed up this model is to explore the use of [8-bit fixed point quantization](https://heartbeat.fritz.ai/8-bit-quantization-and-tensorflow-lite-speeding-up-mobile-inference-with-low-precision-a882dfcafbbd).  Performance can also be increased by a clever combination of tracking algorithms with the already decent detection and this is something I am still experimenting with. Have ideas for optimizing better, please share!  <img src=\"images/general.jpg\" width=\"100%\"> Note: The detector does reflect some limitations associated with the training set. This includes non-egocentric viewpoints, very noisy backgrounds (e.g in a sea of hands) and sometimes skin tone.  There is opportunity to improve these with additional data.   ## Integrating Multiple DNNs.  One way to make things more interesting is to integrate our new knowledge of where \"hands\" are with other detectors trained to recognize other objects. Unfortunately, while our hand detector can in fact detect hands, it cannot detect other objects (a factor or how it is trained). To create a detector that classifies multiple different objects would mean a long involved process of assembling datasets for each class and a lengthy training process.    > Given the above, a potential strategy is to explore structures that allow us **efficiently** interleave output form multiple pretrained models for various object classes and have them detect multiple objects on a single image.    An example of this is with my primary use case where I am interested in understanding the position of objects on a table with respect to hands on same table. I am currently doing some work on a threaded application that loads multiple detectors and outputs bounding boxes on a single image. More on this soon.",
      "language": "Python",
      "stars": 251,
      "forks": 80,
      "url": "https://github.com/molyswu/hand_detection",
      "tags": []
    },
    {
      "id": 130,
      "name": "Open-Data-Catalog",
      "owner": "opendataphilly",
      "full_name": "opendataphilly/Open-Data-Catalog",
      "description": "Open Data Catalog is an open data catalog based on Django, Python and PostgreSQL.  It was originally developed for OpenDataPhilly.org, a portal that provides access to open data sets, applications, and APIs related to the Philadelphia region. The Open Data Catalog is a generalized version of the original source code with a simple skin.  It is intended to display information and links to publicly available data in an easily searchable format. The code also includes options for data owners to submit data for consideration and for registered public users to nominate a type of data they would like to see openly available to the public.",
      "language": "Python",
      "stars": 248,
      "forks": 86,
      "url": "https://github.com/opendataphilly/Open-Data-Catalog",
      "tags": []
    },
    {
      "id": 179,
      "name": "wyzecam-api",
      "owner": "nblavoie",
      "full_name": "nblavoie/wyzecam-api",
      "description": "Wyzecam API reverse engineered to support Wyzecam alternatives applications.",
      "language": "Java",
      "stars": 244,
      "forks": 42,
      "url": "https://github.com/nblavoie/wyzecam-api",
      "tags": []
    },
    {
      "id": 180,
      "name": "lambadaframework",
      "owner": "cagataygurturk",
      "full_name": "cagataygurturk/lambadaframework",
      "description": "Build serverless REST API's with JAVA. It implements the JAX-RS API and deploys your application easily to AWS Lambda and API Gateway",
      "language": "Java",
      "stars": 241,
      "forks": 48,
      "url": "https://github.com/cagataygurturk/lambadaframework",
      "tags": []
    },
    {
      "id": 885,
      "name": "drive-android-quickstart",
      "owner": "googlearchive",
      "full_name": "googlearchive/drive-android-quickstart",
      "description": "[MOVED] Quickstart application showing the Google Drive API for Android",
      "language": "Java",
      "stars": 239,
      "forks": 158,
      "url": "https://github.com/googlearchive/drive-android-quickstart",
      "tags": []
    },
    {
      "id": 131,
      "name": "OpenGPT",
      "owner": "uesleibros",
      "full_name": "uesleibros/OpenGPT",
      "description": "OpenGPT 3.5/4 is a project aimed at providing practical and user-friendly APIs. The APIs allow for easy integration with various applications, making it simple for developers to incorporate the natural language processing capabilities of GPT into their projects.",
      "language": "Python",
      "stars": 238,
      "forks": 28,
      "url": "https://github.com/uesleibros/OpenGPT",
      "tags": [
        "ai",
        "api",
        "artificial-intelligence",
        "chatbot",
        "chatgpt-api",
        "chatgpt-free",
        "free",
        "free-gpt",
        "free-to-use",
        "gpt",
        "gpt-3",
        "gpt-4",
        "language-model",
        "model",
        "openai",
        "openai-api",
        "proxy",
        "python",
        "reverse-engineering",
        "services"
      ]
    },
    {
      "id": 886,
      "name": "digitalocean-swimmer",
      "owner": "yassirh",
      "full_name": "yassirh/digitalocean-swimmer",
      "description": "This is a nonofficial application for the users of DigitalOcean who wish to manage their droplets, snapshots, images and domains via an android application. That communicates with DigitalOcean’s API.",
      "language": "Java",
      "stars": 230,
      "forks": 59,
      "url": "https://github.com/yassirh/digitalocean-swimmer",
      "tags": []
    },
    {
      "id": 132,
      "name": "flusk",
      "owner": "dimmg",
      "full_name": "dimmg/flusk",
      "description": "Boilerplate API on how to structure big Flask applications (includes SQLAlchemy, Docker, nginx)",
      "language": "Python",
      "stars": 225,
      "forks": 27,
      "url": "https://github.com/dimmg/flusk",
      "tags": [
        "blueprints",
        "cors",
        "docker",
        "flask",
        "json-exceptions",
        "middleware",
        "sqlalchemy"
      ]
    },
    {
      "id": 887,
      "name": "grizzly",
      "owner": "javaee",
      "full_name": "javaee/grizzly",
      "description": "Writing scalable server applications in the Java™ programming language has always been difficult. Before the advent of the Java New I/O API (NIO), thread management issues made it impossible for a server to scale to thousands of users. The Grizzly NIO framework has been designed to help developers to take advantage of the Java™ NIO API.",
      "language": "Java",
      "stars": 223,
      "forks": 62,
      "url": "https://github.com/javaee/grizzly",
      "tags": [
        "comet",
        "eventing",
        "http",
        "http2",
        "java",
        "nio",
        "websocket"
      ]
    },
    {
      "id": 133,
      "name": "FastAPI-Full-Stack-Samples",
      "owner": "scionoftech",
      "full_name": "scionoftech/FastAPI-Full-Stack-Samples",
      "description": "The API Application Development using Python FastAPI, including interactive API documentation",
      "language": "Python",
      "stars": 216,
      "forks": 43,
      "url": "https://github.com/scionoftech/FastAPI-Full-Stack-Samples",
      "tags": [
        "api",
        "fastapi",
        "graphql",
        "gunicorn",
        "mongoengine",
        "python-fastapi",
        "rq",
        "socket-io",
        "sqlalchemy",
        "uvicorn"
      ]
    },
    {
      "id": 134,
      "name": "mumbleapi",
      "owner": "divanov11",
      "full_name": "divanov11/mumbleapi",
      "description": "Backend/API for the Mumble.dev, an open source social media application.",
      "language": "Python",
      "stars": 202,
      "forks": 122,
      "url": "https://github.com/divanov11/mumbleapi",
      "tags": []
    },
    {
      "id": 135,
      "name": "bhagavad-gita-api",
      "owner": "gita",
      "full_name": "gita/bhagavad-gita-api",
      "description": "Bhagavad Gita API is an open-source API that lets anyone use the text from Srimad Bhagavad Gita in their own web or mobile application(s).",
      "language": "Python",
      "stars": 194,
      "forks": 37,
      "url": "https://github.com/gita/bhagavad-gita-api",
      "tags": [
        "api",
        "bhagavad-gita",
        "bhagavad-gita-api",
        "bhagavadgita",
        "bhagavadgitaapi",
        "fastapi",
        "gita",
        "gita-api",
        "hacktoberfest-2023",
        "hacktoberfest-accepted",
        "hindu",
        "hinduism",
        "krishna",
        "rest-api",
        "sanatandharma",
        "vedic"
      ]
    },
    {
      "id": 136,
      "name": "vuln-bank",
      "owner": "Commando-X",
      "full_name": "Commando-X/vuln-bank",
      "description": "A deliberately vulnerable banking application designed for practicing secure code reviews and API security testing. Features common vulnerabilities found in real-world applications, making it an ideal platform for security professionals, developers, and enthusiasts to learn security testing and secure coding practices in a safe environment.",
      "language": "Python",
      "stars": 194,
      "forks": 52,
      "url": "https://github.com/Commando-X/vuln-bank",
      "tags": [
        "application-security",
        "devsecops",
        "penetration-testing",
        "secure-coding"
      ]
    },
    {
      "id": 137,
      "name": "whatsapp-api-client-python",
      "owner": "green-api",
      "full_name": "green-api/whatsapp-api-client-python",
      "description": "This library helps you easily create a Python application with WhatsApp API.",
      "language": "Python",
      "stars": 181,
      "forks": 37,
      "url": "https://github.com/green-api/whatsapp-api-client-python",
      "tags": [
        "whatsapp",
        "whatsapp-api",
        "whatsapp-api-python",
        "whatsapp-bot",
        "whatsapp-chat",
        "whatsapp-chatbot",
        "whatsapp-chatbot-python",
        "whatsapp-python"
      ]
    },
    {
      "id": 138,
      "name": "fastapi-health",
      "owner": "Kludex",
      "full_name": "Kludex/fastapi-health",
      "description": "Implement the Health Check API pattern on your FastAPI application! :rocket: ",
      "language": "Python",
      "stars": 178,
      "forks": 14,
      "url": "https://github.com/Kludex/fastapi-health",
      "tags": [
        "fastapi",
        "healthcheck"
      ]
    },
    {
      "id": 139,
      "name": "flask-muck",
      "owner": "dtiesling",
      "full_name": "dtiesling/flask-muck",
      "description": "🧹 Flask REST framework for generating CRUD APIs and OpenAPI specs in the SQLAlchemy, Marshmallow/Pydantic application stack.",
      "language": "Python",
      "stars": 175,
      "forks": 8,
      "url": "https://github.com/dtiesling/flask-muck",
      "tags": [
        "crud",
        "flask",
        "flask-extension",
        "framework",
        "marshmallow",
        "openapi",
        "pydantic",
        "rest",
        "restful-api",
        "sqlalchemy"
      ]
    },
    {
      "id": 142,
      "name": "apig-wsgi",
      "owner": "adamchainz",
      "full_name": "adamchainz/apig-wsgi",
      "description": "Wrap a WSGI application in an AWS Lambda handler function for running on API Gateway or an ALB.",
      "language": "Python",
      "stars": 165,
      "forks": 22,
      "url": "https://github.com/adamchainz/apig-wsgi",
      "tags": []
    },
    {
      "id": 143,
      "name": "todoism",
      "owner": "greyli",
      "full_name": "greyli/todoism",
      "description": "A to-do list application build with Flask, featured with SPA, i18n support and Web APIs.",
      "language": "Python",
      "stars": 159,
      "forks": 222,
      "url": "https://github.com/greyli/todoism",
      "tags": []
    },
    {
      "id": 144,
      "name": "flask-full",
      "owner": "gofynd",
      "full_name": "gofynd/flask-full",
      "description": "starter/boilerplate flask application with celery, mongoengine, signals, shell commands, swagger api docs and sphinx docs integration",
      "language": "Python",
      "stars": 157,
      "forks": 33,
      "url": "https://github.com/gofynd/flask-full",
      "tags": [
        "boilerplate",
        "celery",
        "celerybeat",
        "eventlet",
        "flask",
        "mongoengine",
        "python-3",
        "socket-io",
        "starter"
      ]
    },
    {
      "id": 146,
      "name": "accesslink-example-python",
      "owner": "polarofficial",
      "full_name": "polarofficial/accesslink-example-python",
      "description": "This is an example application that uses the Polar Open AccessLink API. https://polar.com/developers",
      "language": "Python",
      "stars": 153,
      "forks": 70,
      "url": "https://github.com/polarofficial/accesslink-example-python",
      "tags": []
    },
    {
      "id": 147,
      "name": "Faceboom",
      "owner": "thehassantahir",
      "full_name": "thehassantahir/Faceboom",
      "description": "Faceboom is a brute force application built on python 2.7 later upgraded to 3.6 which enables the tester to enter the victims account by using their API, it uses various libraries like optparse, re and more.",
      "language": "Python",
      "stars": 152,
      "forks": 19,
      "url": "https://github.com/thehassantahir/Faceboom",
      "tags": [
        "brute-force",
        "facebook-hack",
        "hacking",
        "kali-linux",
        "penetration-testing",
        "python-facebom",
        "python3",
        "security-tools",
        "thehassantahir",
        "wordlist"
      ]
    },
    {
      "id": 148,
      "name": "Resume-Automation-using-ChatGPT",
      "owner": "koushik4",
      "full_name": "koushik4/Resume-Automation-using-ChatGPT",
      "description": "A Desktop Application for resume building which takes data needed for the resume and use ChatGPT API to make the the job description formal. The description input doesn't have to be formal.",
      "language": "Python",
      "stars": 147,
      "forks": 37,
      "url": "https://github.com/koushik4/Resume-Automation-using-ChatGPT",
      "tags": [
        "chatgpt-api",
        "chatgpt3",
        "desktop-application",
        "openai",
        "resume",
        "resume-app",
        "resume-builder",
        "tkinter"
      ]
    },
    {
      "id": 149,
      "name": "escambo",
      "owner": "CleoMenezesJr",
      "full_name": "CleoMenezesJr/escambo",
      "description": "Escambo is an HTTP-based APIs test application for GNOME",
      "language": "Python",
      "stars": 140,
      "forks": 11,
      "url": "https://github.com/CleoMenezesJr/escambo",
      "tags": [
        "api-rest",
        "escambo",
        "gnome",
        "gtk4",
        "libadwaita",
        "python"
      ]
    },
    {
      "id": 150,
      "name": "openmeteopy",
      "owner": "m0rp43us",
      "full_name": "m0rp43us/openmeteopy",
      "description": "openmeteopy is a client Python wrapper library for Open-Meteo web API. It allows quick and easy consumption of OM data from Python applications via a simple object model and in a human-friendly fashion.",
      "language": "Python",
      "stars": 140,
      "forks": 30,
      "url": "https://github.com/m0rp43us/openmeteopy",
      "tags": []
    },
    {
      "id": 875,
      "name": "cross3d",
      "owner": "blurstudio",
      "full_name": "blurstudio/cross3d",
      "description": "A python module provides a consistent interface to multiple DCC application api.",
      "language": "Python",
      "stars": 139,
      "forks": 32,
      "url": "https://github.com/blurstudio/cross3d",
      "tags": [
        "3dsmax",
        "maya",
        "softimage"
      ]
    },
    {
      "id": 876,
      "name": "devdocs-desktop",
      "owner": "hardpixel",
      "full_name": "hardpixel/devdocs-desktop",
      "description": "GTK3 application for DevDocs API documentation browser.",
      "language": "Python",
      "stars": 123,
      "forks": 9,
      "url": "https://github.com/hardpixel/devdocs-desktop",
      "tags": [
        "devdocs",
        "gtk",
        "python",
        "webkit"
      ]
    },
    {
      "id": 877,
      "name": "heroku3.py",
      "owner": "martyzz1",
      "full_name": "martyzz1/heroku3.py",
      "description": "This is the updated Python wrapper for the Heroku API V3. https://devcenter.heroku.com/articles/platform-api-reference The Heroku REST API allows Heroku users to manage their accounts, applications, addons, and other aspects related to Heroku. It allows you to easily utilize the Heroku platform from your applications.",
      "language": "Python",
      "stars": 122,
      "forks": 74,
      "url": "https://github.com/martyzz1/heroku3.py",
      "tags": []
    },
    {
      "id": 878,
      "name": "tiktok-business-api-sdk",
      "owner": "tiktok",
      "full_name": "tiktok/tiktok-business-api-sdk",
      "description": "An SDK built to facilitate application development to integrate with TikTok Business API.",
      "language": "Python",
      "stars": 120,
      "forks": 37,
      "url": "https://github.com/tiktok/tiktok-business-api-sdk",
      "tags": []
    },
    {
      "id": 879,
      "name": "AssistantsAPI",
      "owner": "theailifestyle",
      "full_name": "theailifestyle/AssistantsAPI",
      "description": "This project is a Streamlit-based web application that leverages OpenAI's Assistants API to provide a ChatGPT-like experience. Users can have real-time conversations with the AI, upload documents to be used as context, and even scrape and convert website content to PDFs to enrich the AI's knowledge base.",
      "language": "Python",
      "stars": 120,
      "forks": 51,
      "url": "https://github.com/theailifestyle/AssistantsAPI",
      "tags": []
    },
    {
      "id": 880,
      "name": "whistleblower",
      "owner": "Repello-AI",
      "full_name": "Repello-AI/whistleblower",
      "description": "Whistleblower is a offensive security tool for testing against system prompt leakage and capability discovery of an AI application exposed through API. Built for AI engineers, security researchers and folks who want to know what's going on inside the LLM-based app they use daily",
      "language": "Python",
      "stars": 119,
      "forks": 10,
      "url": "https://github.com/Repello-AI/whistleblower",
      "tags": [
        "ai-red-teaming",
        "ai-security",
        "jailbreaks",
        "llm-security",
        "prompt-engineering",
        "prompt-injection-llm-security"
      ]
    },
    {
      "id": 881,
      "name": "DocumentGPT",
      "owner": "aju22",
      "full_name": "aju22/DocumentGPT",
      "description": "DocumentGPT is a web application that allows you to chat over your research document using OpenAI's chat API and perform semantic search using vector databases. This tool provides a seamless interface for interacting with your research document, exploring search results, and engaging in a conversation with an AI chatbot.",
      "language": "Python",
      "stars": 116,
      "forks": 36,
      "url": "https://github.com/aju22/DocumentGPT",
      "tags": [
        "chatgpt-api",
        "conversational-ai",
        "faiss",
        "gpt",
        "langchain",
        "llm",
        "natural-language-processing",
        "semantic-search",
        "streamlit",
        "vector-database",
        "webapp"
      ]
    },
    {
      "id": 882,
      "name": "py_ball",
      "owner": "basketballrelativity",
      "full_name": "basketballrelativity/py_ball",
      "description": "Python API for stats.nba.com with a focus on NBA and WNBA applications",
      "language": "Python",
      "stars": 112,
      "forks": 14,
      "url": "https://github.com/basketballrelativity/py_ball",
      "tags": []
    },
    {
      "id": 883,
      "name": "aws-aurora-serverless-data-api-sam",
      "owner": "aws-samples",
      "full_name": "aws-samples/aws-aurora-serverless-data-api-sam",
      "description": "Using Amazon Aurora Serverless (MySQL) and the Data API to build a Serverless Application on AWS",
      "language": "Python",
      "stars": 111,
      "forks": 31,
      "url": "https://github.com/aws-samples/aws-aurora-serverless-data-api-sam",
      "tags": []
    },
    {
      "id": 884,
      "name": "prompt",
      "owner": "raiyanyahya",
      "full_name": "raiyanyahya/prompt",
      "description": "🥝 A command line application to interact with OpenAI's ChatGPT API.",
      "language": "Python",
      "stars": 105,
      "forks": 6,
      "url": "https://github.com/raiyanyahya/prompt",
      "tags": [
        "ai",
        "chatgpt",
        "chatgpt-api",
        "cli",
        "developer-tools",
        "machine-learning",
        "python"
      ]
    }
  ]
}